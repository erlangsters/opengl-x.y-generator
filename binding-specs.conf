[
  {functions, [
    % Items for OpenGL 3.3.
    {"glCullFace", {direct, [
      {name, "cull_face"},
      {params, [
        {in, "Mode", {gl_enum, "TriangleFace"}}
      ]},
      {return, gl_void},
      {doc, "Specify whether front- or back-facing facets can be culled."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glFrontFace", {direct, [
      {name, "front_face"},
      {params, [
        {in, "Mode", {gl_enum, "FrontFaceDirection"}}
      ]},
      {return, gl_void},
      {doc, "Define front- and back-facing polygons."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glHint", {direct, [
      {name, "hint"},
      {params, [
        {in, "Target", {gl_enum, "HintTarget"}},
        {in, "Mode", {gl_enum, "HintMode"}}
      ]},
      {return, gl_void},
      {doc, "Specify implementation-specific hints."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glLineWidth", {direct, [
      {name, "line_width"},
      {params, [
        {in, "Width", gl_float}
      ]},
      {return, gl_void},
      {doc, "Specify the width of rasterized lines."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glPointSize", {direct, [
      {name, "point_size"},
      {params, [
        {in, "Size", gl_float}
      ]},
      {return, gl_void},
      {doc, "Specify the diameter of rasterized points."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glPolygonMode", {direct, [
      {name, "polygon_mode"},
      {params, [
        {in, "Face", {gl_enum, "TriangleFace"}},
        {in, "Mode", {gl_enum, "PolygonMode"}}
      ]},
      {return, gl_void},
      {doc, "Select a polygon rasterization mode."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glScissor", {direct, [
      {name, "scissor"},
      {params, [
        {in, "X", gl_int},
        {in, "Y", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Define the scissor box."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTexParameterf", {indirect,
      {"glTexParameter", gl_float, element}}
    },
    {"glTexParameterfv", {indirect,
      {"glTexParameter", gl_float, array}}
    },
    {"glTexParameteri", {indirect,
      {"glTexParameter", gl_int, element}}
    },
    {"glTexParameteriv", {indirect,
      {"glTexParameter", gl_int, array}}
    },
    {"glTexImage1D", {direct, [
      {name, "tex_image_1d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        % XXX: in the specs, instead of being enum it's a glint....
        {in, "InternalFormat", {gl_enum, "InternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Border", gl_int},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "Type", {gl_enum, "PixelType"}},
        {in, "Pixels", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Specify a one-dimensional texture image."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTexImage2D", {direct, [
      {name, "tex_image_2d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        % XXX: in the specs, instead of being enum it's a glint....
        {in, "InternalFormat", {gl_enum, "InternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Border", gl_int},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "Type", {gl_enum, "PixelType"}},
        {in, "Pixels", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Establish the data storage, format, dimensions, and number of samples of a multisample texture's image."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDrawBuffer", {direct, [
      {name, "draw_buffer"},
      {params, [
        {in, "Buffer", {gl_enum, "DrawBufferMode"}}
      ]},
      {return, gl_void},
      {doc, "Specify which color buffers are to be drawn into."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glClear", {direct, [
      {name, "clear"},
      {params, [
        {in, "Mask", {gl_bitfield, "ClearBufferMask"}}
      ]},
      {return, gl_void},
      {doc, "Clear buffers to preset values."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glClearColor", {direct, [
      {name, "clear_color"},
      {params, [
        {in, "Red", gl_float},
        {in, "Green", gl_float},
        {in, "Blue", gl_float},
        {in, "Alpha", gl_float}
      ]},
      {return, gl_void},
      {doc, "Specify clear values for the color buffers."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glClearStencil", {direct, [
      {name, "clear_stencil"},
      {params, [
        {in, "S", gl_int}
      ]},
      {return, gl_void},
      {doc, "Specify the clear value for the stencil buffer."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glClearDepth", {direct, [
      {name, "clear_depth"},
      {params, [
        {in, "Depth", gl_double}
      ]},
      {return, gl_void},
      {doc, "Specify the clear value for the depth buffer."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glStencilMask", {direct, [
      {name, "stencil_mask"},
      {params, [
        {in, "Mask", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Control the front and back writing of individual bits in the stencil planes."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glColorMask", {direct, [
      {name, "color_mask"},
      {params, [
        {in, "Red", gl_bool},
        {in, "Green", gl_bool},
        {in, "Blue", gl_bool},
        {in, "Alpha", gl_bool}
      ]},
      {return, gl_void},
      {doc, "Enable and disable writing of frame buffer color components."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDepthMask", {direct, [
      {name, "depth_mask"},
      {params, [
        {in, "Flag", gl_bool}
      ]},
      {return, gl_void},
      {doc, "Enable or disable writing into the depth buffer."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDisable", {direct, [
      {name, "disable"},
      {params, [
        {in, "Cap", {gl_enum, "EnableCap"}}
      ]},
      {return, gl_void},
      % xxx: No doc ?
      {doc, "foobar"}
    ]}},
    {"glEnable", {direct, [
      {name, "enable"},
      {params, [
        {in, "Cap", {gl_enum, "EnableCap"}}
      ]},
      {return, gl_void},
      {doc, "Enable or disable server-side GL capabilities."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glFinish", {direct, [
      {name, "finish"},
      {params, []},
      {return, gl_void},
      {doc, "Block until all GL execution is complete."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glFlush", {direct, [
      {name, "flush"},
      {params, []},
      {return, gl_void},
      {doc, "Force execution of GL commands in finite time."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glBlendFunc", {direct, [
      {name, "blend_func"},
      {params, [
        {in, "SourceFactor", {gl_enum, "BlendingFactor"}},
        {in, "DestinationFactor", {gl_enum, "BlendingFactor"}}
      ]},
      {return, gl_void},
      {doc, "Specify pixel arithmetic."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glLogicOp", {direct, [ % XXX: Not working, review this.
    %   {name, "logic_op"},
    %   {params, [
    %     {in, "OpCode", {gl_enum, "LogicOp"}}
    %   ]},
    %   {return, gl_void},
    %   {doc, "Specify a logical pixel operation for rendering."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glStencilFunc", {direct, [
      {name, "stencil_func"},
      {params, [
        {in, "Function", {gl_enum, "StencilFunction"}},
        {in, "Ref", gl_int},
        {in, "Mask", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Set front and back function and reference value for stencil testing."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glStencilOp", {direct, [
      {name, "stencil_op"},
      {params, [
        {in, "Fail", {gl_enum, "StencilOp"}},
        {in, "ZFail", {gl_enum, "StencilOp"}},
        {in, "ZPass", {gl_enum, "StencilOp"}}
      ]},
      {return, gl_void},
      {doc, "Set front and back stencil test actions."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDepthFunc", {direct, [
      {name, "depth_func"},
      {params, [
        {in, "Function", {gl_enum, "DepthFunction"}}
      ]},
      {return, gl_void},
      {doc, "Specify the value used for depth buffer comparisons."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glPixelStoref", {indirect,
      {"glPixelStore", gl_float, element}}
    },
    {"glPixelStorei", {indirect,
      {"glPixelStore", gl_int, element}}
    },
    {"glReadBuffer", {direct, [
      {name, "read_buffer"},
      {params, [
        {in, "Source", {gl_enum, "ReadBufferMode"}}
      ]},
      {return, gl_void},
      {doc, "Select a color buffer source for pixels."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glReadPixels", {direct, [
      {name, "read_pixels"},
      {params, [
        {in, "X", gl_int},
        {in, "Y", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "Type", {gl_enum, "PixelType"}},
        {out, "Data", {gl_binary, {implicit, "DataSize"}}}
      ]},
      {return, gl_void},
      {doc, "Read a block of pixels from the frame buffer."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGetBooleanv", {direct, [
      {name, "get_boolean"},
      {params, [
        {in, "Name", {gl_enum, "GetPName"}},
        {out, "Data", {{list, 1}, gl_bool}}
      ]},
      {return, gl_void},
      {doc, "foobar"}
    ]}},
    {"glGetDoublev", {direct, [
      {name, "get_double"},
      {params, [
        {in, "Name", {gl_enum, "GetPName"}},
        {out, "Data", {{list, 1}, gl_double}}
      ]},
      {return, gl_void},
      {doc, "foobar"}
    ]}},
    {"glGetError", {direct, [
      {name, "get_error"},
      {params, []},
      {return, {gl_enum, "ErrorCode"}},
      {doc, "Return error information."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGetFloatv", {direct, [
      {name, "get_float"},
      {params, [
        {in, "Name", {gl_enum, "GetPName"}},
        {out, "Data", {{list, 1}, gl_float}}
      ]},
      {return, gl_void},
      {doc, "foobar"}
    ]}},
    {"glGetIntegerv", {direct, [
      {name, "get_integer"},
      {params, [
        {in, "Name", {gl_enum, "GetPName"}},
        {out, "Data", {{list, 1}, gl_int}}
      ]},
      {return, gl_void},
      {doc, "foobar"}
    ]}},
    {"glGetString", {direct, [
      {name, "get_string"},
      {params, [
        {in, "Name", {gl_enum, "StringName"}}
      ]},
      {return, {gl_string, glubyte}},
      {doc, "Return a string describing the current GL connection."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGetTexImage", {direct, [
      {name, "get_tex_image"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "Type", {gl_enum, "PixelType"}},
        {out, "Pixels", {gl_binary, {implicit, "PixelsSize"}}}
      ]},
      {return, gl_void},
      {doc, "Return a texture image."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGetTexParameterfv", {indirect,
      {"glGetTexParameter", gl_float, array}}
    },
    {"glGetTexParameteriv", {indirect,
      {"glGetTexParameter", gl_int, array}}
    },
    {"glGetTexLevelParameterfv", {indirect,
      {"glGetTexLevelParameter", gl_float, array}}
    },
    {"glGetTexLevelParameteriv", {indirect,
      {"glGetTexLevelParameter", gl_int, array}}
    },
    {"glIsEnabled", {direct, [
      {name, "is_enabled"},
      {params, [
        {in, "Capability", {gl_enum, "EnableCap"}}
      ]},
      {return, gl_bool},
      {doc, "Test whether a capability is enabled."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDepthRange", {direct, [
      {name, "depth_range"},
      {params, [
        {in, "Near", gl_double},
        {in, "Far", gl_double}
      ]},
      {return, gl_void},
      {doc, "Specify mapping of depth values from normalized device coordinates to window coordinates."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glViewport", {direct, [
      {name, "viewport"},
      {params, [
        {in, "X", gl_int},
        {in, "Y", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Set the viewport."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDrawArrays", {direct, [
      {name, "draw_arrays"},
      {params, [
        {in, "Mode", {gl_enum, "PrimitiveType"}},
        {in, "First", gl_int},
        {in, "Count", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Render primitives from array data."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glDrawElements", {direct, [ XXX: To be implemented, postponed because Indices could also be 0.
    %   {name, "draw_elements"},
    %   {params, [
    %     {in, "Mode", {gl_enum, "PrimitiveType"}},
    %     {in, "Count", gl_sizei},
    %     {in, "Type", {gl_enum, "DrawElementsType"}},
    %     {in, "Indices", gl_binary}
    %   ]},
    %   {return, gl_void},
      % {doc, "foobar"}
    % ]}},
    {"glPolygonOffset", {direct, [
      {name, "polygon_offset"},
      {params, [
        {in, "Factor", gl_float},
        {in, "Units", gl_float}
      ]},
      {return, gl_void},
      {doc, "Set the scale and units used to calculate depth values."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCopyTexImage1D", {direct, [
      {name, "copy_tex_image_1d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        {in, "InternalFormat", {gl_enum, "InternalFormat"}},
        {in, "X", gl_int},
        {in, "Y", gl_int},
        {in, "Width", gl_sizei},
        {in, "Border", gl_int}
      ]},
      {return, gl_void},
      {doc, "Copy pixels into a 1D texture image."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCopyTexImage2D", {direct, [
      {name, "copy_tex_image_2d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        {in, "InternalFormat", {gl_enum, "InternalFormat"}},
        {in, "X", gl_int},
        {in, "Y", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Border", gl_int}
      ]},
      {return, gl_void},
      {doc, "Copy pixels into a 2D texture image."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCopyTexSubImage1D", {direct, [
      {name, "copy_tex_sub_image_1d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        {in, "Offset", gl_int},
        {in, "X", gl_int},
        {in, "Y", gl_int},
        {in, "Width", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Copy a one-dimensional texture subimage."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCopyTexSubImage2D", {direct, [
      {name, "copy_tex_sub_image_2d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        {in, "OffsetX", gl_int},
        {in, "OffsetY", gl_int},
        {in, "X", gl_int},
        {in, "Y", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Copy a two-dimensional texture subimage."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTexSubImage1D", {direct, [
      {name, "tex_sub_image_1d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        {in, "Offset", gl_int},
        {in, "Width", gl_sizei},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "Type", {gl_enum, "PixelType"}},
        {in, "Pixels", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Specify a one-dimensional texture subimage."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTexSubImage2D", {direct, [
      {name, "tex_sub_image_2d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        {in, "OffsetX", gl_int},
        {in, "OffsetY", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "Type", {gl_enum, "PixelType"}},
        {in, "Pixels", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Specify a two-dimensional texture subimage."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glBindTexture", {direct, [
      {name, "bind_texture"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Texture", {gl_object, texture}}
      ]},
      {return, gl_void},
      {doc, "Bind a named texture to a texturing target."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDeleteTextures", {direct, [
      {name, "delete_textures"},
      {params, [
        {in, "N", gl_sizei},
        {in, "Textures", {list, {gl_object, texture}}}
      ]},
      {return, gl_void},
      {doc, "Delete named textures."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGenTextures", {direct, [
      {name, "gen_textures"},
      {params, [
        {out, "Textures", {{list, 2}, {gl_object, texture}}}
      ]},
      {return, gl_void},
      {doc, "Generate texture names."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glIsTexture", {direct, [
      {name, "is_texture"},
      {params, [
        {in, "Texture", {gl_object, texture}}
      ]},
      {return, gl_bool},
      {doc, "Determine if a name corresponds to a texture."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glDrawRangeElements", {direct, [ % XXX: postponed
    %   {name, "draw_range_elements"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Render primitives from array data."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glTexImage3D", {direct, [
      {name, "tex_image_3d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        % XXX: in the specs, instead of being enum it's a glint....
        {in, "InternalFormat", {gl_enum, "InternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Depth", gl_sizei},
        {in, "Border", gl_int},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "Type", {gl_enum, "PixelType"}},
        {in, "Pixels", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Specify a three-dimensional texture image."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTexSubImage3D", {direct, [
      {name, "tex_sub_image_3d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        {in, "OffsetX", gl_int},
        {in, "OffsetY", gl_int},
        {in, "OffsetZ", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Depth", gl_sizei},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "Type", {gl_enum, "PixelType"}},
        {in, "Pixels", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Specify a three-dimensional texture subimage."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCopyTexSubImage3D", {direct, [
      {name, "copy_tex_sub_image_3d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        {in, "OffsetX", gl_int},
        {in, "OffsetY", gl_int},
        {in, "OffsetZ", gl_int},
        {in, "X", gl_int},
        {in, "Y", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Copy a three-dimensional texture subimage."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glActiveTexture", {direct, [
      {name, "active_texture"},
      {params, [
        {in, "Texture", {gl_enum, "TextureUnit"}}
      ]},
      {return, gl_void},
      {doc, "Select active texture unit."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glSampleCoverage", {direct, [
      {name, "sample_coverage"},
      {params, [
        {in, "Value", gl_float},
        {in, "Invert", gl_bool}
      ]},
      {return, gl_void},
      {doc, "Specify multisample coverage parameters."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCompressedTexImage3D", {direct, [
      {name, "compressed_tex_image_3d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        {in, "InternalFormat", {gl_enum, "InternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Depth", gl_sizei},
        {in, "Border", gl_int},
        {in, "ImageSize", gl_sizei},
        {in, "ImageData", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Specify a three-dimensional texture image in a compressed format."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCompressedTexImage2D", {direct, [
      {name, "compressed_tex_image_2d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        {in, "InternalFormat", {gl_enum, "InternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Border", gl_int},
        {in, "ImageSize", gl_sizei},
        {in, "ImageData", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Specify a two-dimensional texture image in a compressed format."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCompressedTexImage1D", {direct, [
      {name, "compressed_tex_image_1d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        {in, "InternalFormat", {gl_enum, "InternalFormat"}},
        {in, "Size", gl_sizei},
        {in, "Border", gl_int},
        {in, "ImageSize", gl_sizei},
        {in, "ImageData", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Specify a one-dimensional texture image in a compressed format."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCompressedTexSubImage3D", {direct, [
      {name, "compressed_tex_sub_image_3d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        {in, "OffsetX", gl_int},
        {in, "OffsetY", gl_int},
        {in, "OffsetZ", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Depth", gl_sizei},
        {in, "Format", {gl_enum, "InternalFormat"}},
        {in, "ImageSize", gl_sizei},
        {in, "ImageData", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Specify a three-dimensional texture subimage in a compressed format."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCompressedTexSubImage2D", {direct, [
      {name, "compressed_tex_sub_image_2d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        {in, "OffsetX", gl_int},
        {in, "OffsetY", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Format", {gl_enum, "InternalFormat"}},
        {in, "ImageSize", gl_sizei},
        {in, "ImageData", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Specify a two-dimensional texture subimage in a compressed format."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCompressedTexSubImage1D", {direct, [
      {name, "compressed_tex_sub_image_1d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        {in, "Offset", gl_int},
        {in, "Size", gl_sizei},
        {in, "Format", {gl_enum, "InternalFormat"}},
        {in, "ImageSize", gl_sizei},
        {in, "ImageData", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Specify a one-dimensional texture subimage in a compressed format."},
      {example, """
      gl:foobar(abc, xyz).
      """}

    ]}},
    % --- DONE until now
    % {"glGetCompressedTexImage", {direct, [
    %   {name, "get_compressed_tex_image"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Return a compressed texture image."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glBlendFuncSeparate", {direct, [
      {name, "blend_func_separate"},
      {params, [
        {in, "SourceRGB", {gl_enum, "BlendingFactor"}},
        {in, "DestinationRGB", {gl_enum, "BlendingFactor"}},
        {in, "SourceAlpha", {gl_enum, "BlendingFactor"}},
        {in, "DestinationAlpha", {gl_enum, "BlendingFactor"}}
      ]},
      {return, gl_void},
      {doc, "Specify pixel arithmetic for RGB and alpha components separately."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glMultiDrawArrays", {direct, [
    %   {name, "multi_draw_arrays"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Render multiple sets of primitives from array data."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glMultiDrawElements", {direct, [
    %   {name, "multi_draw_elements"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Render multiple sets of primitives by specifying indices of array data elements."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glPointParameterf", {indirect,
      {"glPointParameter", gl_float, element}}
    },
    {"glPointParameterfv", {indirect,
      {"glPointParameter", gl_float, array}}
    },
    {"glPointParameteri", {indirect,
      {"glPointParameter", gl_int, element}}
    },
    {"glPointParameteriv", {indirect,
      {"glPointParameter", gl_int, array}}
    },
    {"glBlendColor", {direct, [
      {name, "blend_color"},
      {params, [
        {in, "Red", gl_float},
        {in, "Green", gl_float},
        {in, "Blue", gl_float},
        {in, "Alpha", gl_float}
      ]},
      {return, gl_void},
      {doc, "Set the blend color."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glBlendEquation", {direct, [
      {name, "blend_equation"},
      {params, [
        {in, "Mode", {gl_enum, "BlendEquationModeEXT"}}
      ]},
      {return, gl_void},
      {doc, "Specify the equation used for both the RGB blend equation and the Alpha blend equation."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGenQueries", {direct, [
      {name, "gen_queries"},
      {params, [
        {out, "Queries", {{list, 2}, {gl_object, query}}}
      ]},
      {return, gl_void},
      {doc, "Generate query object names."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDeleteQueries", {direct, [
      {name, "delete_queries"},
      {params, [
        {in, "N", gl_sizei},
        {in, "Queries", {list, {gl_object, query}}}
      ]},
      {return, gl_void},
      {doc, "Delete named query objects."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glIsQuery", {direct, [
      {name, "is_query"},
      {params, [
        {in, "Query", {gl_object, query}}
      ]},
      {return, gl_bool},
      {doc, "Determine if a name corresponds to a query object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glBeginQuery", {direct, [
      {name, "begin_query"},
      {params, [
        {in, "Target", {gl_enum, "QueryTarget"}},
        {in, "Query", {gl_object, query}}
      ]},
      {return, gl_void},
      {doc, "Delimit the boundaries of a query object."},
      {example, """
      gl:foobar(abc, xyz).
      """}

    ]}},
    {"glEndQuery", {direct, [ % XXX: No documentation ?
      {name, "end_query"},
      {params, [
        {in, "Target", {gl_enum, "QueryTarget"}}
      ]},
      {return, gl_void}
    ]}},
    {"glGetQueryiv", {indirect,  % XXX: Only one variant ?? doubl-echeck
      {"glGetQuery", gl_int, array}}
    },
    {"glGetQueryObjectiv", {indirect,
      {"glGetQueryObject", gl_int, array}}
    },
    {"glGetQueryObjectuiv", {indirect,
      {"glGetQueryObject", gl_uint, array}}
    },
    {"glBindBuffer", {direct, [
      {name, "bind_buffer"},
      {params, [
        {in, "Target", {gl_enum, "BufferTargetARB"}}, % XXX: review this: specs says `BufferTargetARB`
        {in, "Buffer", {gl_object, buffer}}
      ]},
      {return, gl_void},
      {doc, "Bind a named buffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDeleteBuffers", {direct, [
      {name, "delete_buffers"},
      {params, [
        {in, "N", gl_sizei},
        {in, "Buffers", {list, {gl_object, buffer}}}
      ]},
      {return, gl_void},
      {doc, "Delete named buffer objects."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGenBuffers", {direct, [
      {name, "gen_buffers"},
      {params, [
        {out, "Buffers", {{list, 2}, {gl_object, buffer}}}
        % {out, "Buffers", {{list, 1}, gl_uint}} % XXX: FIx this
      ]},
      {return, gl_void},
      {doc, "Generate buffer object names."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glIsBuffer", {direct, [
      {name, "is_buffer"},
      {params, [
        {in, "Buffer", {gl_object, buffer}}
      ]},
      {return, gl_bool},
      {doc, "Determine if a name corresponds to a buffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glBufferData", {direct, [
      {name, "buffer_data"},
      {params, [
        {in, "Target", {gl_enum, "BufferTargetARB"}}, % specs says `BufferTargetARB`
        {in, "Size", gl_sizeiptr},
        {in, "Data", gl_binary_or_null},
        {in, "Usage", {gl_enum, "BufferUsageARB"}}
      ]},
      {return, gl_void},
      {doc, "Creates and initializes a buffer object's data
    store."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glBufferSubData", {direct, [
    %   {name, "buffer_sub_data"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Updates a subset of a buffer object's data store."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetBufferSubData", {direct, [ % XXX: hmm... what's GLintptr..
    %   {name, "get_buffer_sub_data"},
    %   {params, [
    %     {in, "Target", {gl_enum, "BufferTarget"}}, % specs says `BufferTargetARB`
    %     {in, "Offset", gl_sizei},
    %     {out, "Data", {gl_binary, {implicit, "DataSize"}}}
    %   ]},
    %   {return, gl_void},
    %   {doc, "Returns a subset of a buffer object's data store."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glMapBuffer", {direct, [
    %   {name, "map_buffer"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Map all of a buffer object's data store into the client's address space."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glUnmapBuffer", {direct, [
    %   {name, "unmap_buffer"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Release the mapping of a buffer object's data store into the client's address space."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},

    {"glGetBufferParameteriv", {indirect,
      {"glGetBufferParameter", gl_int, array}
    }},

    % {"glGetBufferPointerv", {"glGetBufferPointer", "v"}},

    {"glBlendEquationSeparate", {direct, [ % XXX: Rewview this, specs says `BlendEquationModeEXT`
      {name, "blend_equation_separate"},
      {params, [
        {in, "ModeRGB", {gl_enum, "BlendEquationModeEXT"}},
        {in, "ModeAlpha", {gl_enum, "BlendEquationModeEXT"}}
      ]},
      {return, gl_void},
      {doc, "Set the RGB blend equation and the alpha blend equation separately."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glDrawBuffers", {direct, [
    %   {name, "draw_buffers"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Specifies a list of color buffers to be drawn
    % into."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glStencilOpSeparate", {direct, [
      {name, "stencil_op_separate"},
      {params, [
        {in, "Face", {gl_enum, "TriangleFace"}},
        {in, "StencilFail", {gl_enum, "StencilOp"}},
        {in, "DepthPassFail", {gl_enum, "StencilOp"}},
        {in, "DepthPassPass", {gl_enum, "StencilOp"}}
      ]},
      {return, gl_void},
      {doc, "Set front and/or back stencil test actions."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glStencilFuncSeparate", {direct, [
      {name, "stencil_func_separate"},
      {params, [
        {in, "Face", {gl_enum, "TriangleFace"}},
        {in, "Function", {gl_enum, "StencilFunction"}},
        {in, "Ref", gl_int},
        {in, "Mask", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Set front and/or back function and reference value for stencil testing."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glStencilMaskSeparate", {direct, [
      {name, "stencil_mask_separate"},
      {params, [
        {in, "Face", {gl_enum, "TriangleFace"}},
        {in, "Mask", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Control the front and/or back writing of individual bits in the stencil planes."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glAttachShader", {direct, [
      {name, "attach_shader"},
      {params, [
        {in, "Program", {gl_object, program}},
        {in, "Shader", {gl_object, shader}}
      ]},
      {return, gl_void},
      {doc, "Attaches a shader object to a program object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glBindAttribLocation", {direct, [
    %   {name, "bind_attrib_location"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Associates a generic vertex attribute index with a named attribute variable."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glCompileShader", {direct, [
      {name, "compile_shader"},
      {params, [
        {in, "Shader", {gl_object, shader}}
      ]},
      {return, gl_void},
      {doc, "Compiles a shader object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCreateProgram", {direct, [
      {name, "create_program"},
      {params, []},
      {return, {gl_object, program}},
      {doc, "Create program pipeline objects."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCreateShader", {direct, [
      {name, "create_shader"},
      {params, [
        {in, "Type", {gl_enum, "ShaderType"}}
      ]},
      {return, {gl_object, shader}},
      {doc, "Creates a shader object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDeleteProgram", {direct, [
      {name, "delete_program"},
      {params, [
        {in, "Program", {gl_object, program}}
      ]},
      {return, gl_void},
      {doc, "Deletes a program object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDeleteShader", {direct, [
      {name, "delete_shader"},
      {params, [
        {in, "Shader", {gl_object, shader}}
      ]},
      {return, gl_void},
      {doc, "Deletes a shader object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDetachShader", {direct, [
      {name, "detach_shader"},
      {params, [
        {in, "Program", {gl_object, program}},
        {in, "Shader", {gl_object, shader}}
      ]},
      {return, gl_void},
      {doc, "Detaches a shader object from a program object to which it is attached."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDisableVertexAttribArray", {direct, [ % XXX: No documentation ?
      {name, "disable_vertex_attrib_array"},
      {params, [
        {in, "Index", gl_uint}
      ]},
      {return, gl_void}
    ]}},
    {"glEnableVertexAttribArray", {direct, [
      {name, "enable_vertex_attrib_array"},
      {params, [
        {in, "Index", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Enable or disable a generic vertex attribute
    array."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glGetActiveAttrib", {direct, [
    %   {name, "get_active_attrib"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Returns information about an active attribute variable for the specified program object."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetActiveUniform", {direct, [
    %   {name, "get_active_uniform"},
    %   {params, [
    %     {in, "Program", {gl_object, program}},
    %     {in, "Index", gl_uint},
    %     {in, "BufferSize", gl_sizei},
    %     {out, "Length", gl_sizei},
    %     {out, "Size", gl_int},
    %     {out, "Type", {gl_enum, "UniformType"}},
    %     {out, "Name", {gl_pointer, "char"}}
    %   ]},
    %   {return, gl_void},
    %   {doc, "Returns information about an active uniform variable for the specified program object."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}

    % ]}},
    % {"glGetAttachedShaders", {direct, [
    %   {name, "get_attached_shaders"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Returns the handles of the shader objects attached to a program object."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetAttribLocation", {direct, [
    %   {name, "get_attrib_location"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Returns the location of an attribute variable."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetProgramiv", {indirect,
    %   {"glGetProgram", gl_int, array}
    % }},
    {"glGetProgramInfoLog", {direct, [
      {name, "get_program_info_log"},
      {params, [
        {in, "Program", {gl_object, program}},
        {out, "InfoLog", gl_string}
      ]},
      {return, gl_void},
      {doc, "Returns the information log for a program object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glGetShaderiv", {indirect,
    %   {"glGetShader", gl_int, array}
    % }},
    {"glGetShaderInfoLog", {direct, [
      {name, "get_shader_info_log"},
      {params, [
        {in, "Shader", {gl_object, shader}},
        {out, "InfoLog", gl_string}
      ]},
      {return, gl_void},
      {doc, "Returns the information log for a shader object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGetShaderSource", {direct, [
      {name, "get_shader_source"},
      {params, [
        {in, "Shader", {gl_object, shader}},
        {out, "Source", gl_string}
      ]},
      {return, gl_void},
      {doc, "Returns the source code string from a shader object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glGetUniformLocation", {direct, [
    %   {name, "get_uniform_location"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Returns the location of a uniform variable."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glGetUniformfv", {indirect,
      {"glGetUniform", gl_float, array}
    }},
    {"glGetUniformiv", {indirect,
      {"glGetUniform", gl_int, array}
    }},
    {"glGetVertexAttribdv", {indirect,
      {"glGetVertexAttrib", gl_double, array}
    }},
    {"glGetVertexAttribfv", {indirect,
      {"glGetVertexAttrib", gl_float, array}
    }},
    {"glGetVertexAttribiv", {indirect,
      {"glGetVertexAttrib", gl_int, array}
    }},
    % {"glGetVertexAttribPointerv", {"glGetVertexAttribPointer", "v"}},
    {"glIsProgram", {direct, [
      {name, "is_program"},
      {params, [
        {in, "Program", {gl_object, program}}
      ]},
      {return, gl_bool},
      {doc, "Determines if a name corresponds to a program object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glIsShader", {direct, [
      {name, "is_shader"},
      {params, [
        {in, "Shader", {gl_object, shader}}
      ]},
      {return, gl_bool},
      {doc, "Determines if a name corresponds to a shader object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glLinkProgram", {direct, [
      {name, "link_program"},
      {params, [
        {in, "Program", {gl_object, program}}
      ]},
      {return, gl_void},
      {doc, "Links a program object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glShaderSource", {direct, [
      {name, "shader_source"},
      {params, [
        {in, "Shader", {gl_object, shader}},
        {in, "Source", list_gl_strings}

      ]},
      {return, gl_void},
      {doc, "Replaces the source code in a shader object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glUseProgram", {direct, [
      {name, "use_program"},
      {params, [
        {in, "Program", {gl_object, program}}
      ]},
      {return, gl_void},
      {doc, "Installs a program object as part of current rendering state."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glUniform1f", {indirect,
      {"glUniform", {gl_vector, 1, gl_float}, element}
    }},
    {"glUniform2f", {indirect,
      {"glUniform", {gl_vector, 2, gl_float}, element}
    }},
    {"glUniform3f", {indirect,
      {"glUniform", {gl_vector, 3, gl_float}, element}
    }},
    {"glUniform4f", {indirect,
      {"glUniform", {gl_vector, 4, gl_float}, element}
    }},
    {"glUniform1i", {indirect,
      {"glUniform", {gl_vector, 1, gl_int}, element}
    }},
    {"glUniform2i", {indirect,
      {"glUniform", {gl_vector, 2, gl_int}, element}
    }},
    {"glUniform3i", {indirect,
      {"glUniform", {gl_vector, 3, gl_int}, element}
    }},
    {"glUniform4i", {indirect,
      {"glUniform", {gl_vector, 4, gl_int}, element}
    }},
    {"glUniform1fv", {indirect,
      {"glUniform", {gl_vector, 1, gl_float}, array}
    }},
    {"glUniform2fv", {indirect,
      {"glUniform", {gl_vector, 2, gl_float}, array}
    }},
    {"glUniform3fv", {indirect,
      {"glUniform", {gl_vector, 3, gl_float}, array}
    }},
    {"glUniform4fv", {indirect,
      {"glUniform", {gl_vector, 4, gl_float}, array}
    }},
    {"glUniform1iv", {indirect,
      {"glUniform", {gl_vector, 1, gl_int}, array}
    }},
    {"glUniform2iv", {indirect,
      {"glUniform", {gl_vector, 2, gl_int}, array}
    }},
    {"glUniform3iv", {indirect,
      {"glUniform", {gl_vector, 3, gl_int}, array}
    }},
    {"glUniform4iv", {indirect,
      {"glUniform", {gl_vector, 4, gl_int}, array}
    }},
    {"glUniformMatrix2fv", {indirect,
      {"glUniformMatrix", {gl_matrix, 2, 2, gl_float}, array}
    }},
    {"glUniformMatrix3fv", {indirect,
      {"glUniformMatrix", {gl_matrix, 3, 3, gl_float}, array}
    }},
    {"glUniformMatrix4fv", {indirect,
      {"glUniformMatrix", {gl_matrix, 4, 4, gl_float}, array}
    }},
    {"glValidateProgram", {direct, [
      {name, "validate_program"},
      {params, [
        {in, "Program", {gl_object, program}}
      ]},
      {return, gl_void},
      {doc, "Validates a program object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glVertexAttrib1d", {indirect,
      {"glVertexAttrib", {gl_vector, 1, gl_double}, element}}
    },
    {"glVertexAttrib1dv", {indirect,
      {"glVertexAttrib", {gl_vector, 1, gl_double}, array}}
    },
    {"glVertexAttrib1f", {indirect,
      {"glVertexAttrib", {gl_vector, 1, gl_float}, element}}
    },
    {"glVertexAttrib1fv", {indirect,
      {"glVertexAttrib", {gl_vector, 1, gl_float}, array}}
    },
    {"glVertexAttrib1s", {indirect,
      {"glVertexAttrib", {gl_vector, 1, gl_short}, element}}
    },
    {"glVertexAttrib1sv", {indirect,
      {"glVertexAttrib", {gl_vector, 1, gl_short}, array}}
    },
    {"glVertexAttrib2d", {indirect,
      {"glVertexAttrib", {gl_vector, 2, gl_double}, element}}
    },
    {"glVertexAttrib2dv", {indirect,
      {"glVertexAttrib", {gl_vector, 2, gl_double}, array}}
    },
    {"glVertexAttrib2f", {indirect,
      {"glVertexAttrib", {gl_vector, 2, gl_float}, element}}
    },
    {"glVertexAttrib2fv", {indirect,
      {"glVertexAttrib", {gl_vector, 2, gl_float}, array}}
    },
    {"glVertexAttrib2s", {indirect,
      {"glVertexAttrib", {gl_vector, 2, gl_short}, element}}
    },
    {"glVertexAttrib2sv", {indirect,
      {"glVertexAttrib", {gl_vector, 2, gl_short}, array}}
    },
    {"glVertexAttrib3d", {indirect,
      {"glVertexAttrib", {gl_vector, 3, gl_double}, element}}
    },
    {"glVertexAttrib3dv", {indirect,
      {"glVertexAttrib", {gl_vector, 3, gl_double}, array}}
    },
    {"glVertexAttrib3f", {indirect,
      {"glVertexAttrib", {gl_vector, 3, gl_float}, element}}
    },
    {"glVertexAttrib3fv", {indirect,
      {"glVertexAttrib", {gl_vector, 3, gl_float}, array}}
    },
    {"glVertexAttrib3s", {indirect,
      {"glVertexAttrib", {gl_vector, 3, gl_short}, element}}
    },
    {"glVertexAttrib3sv", {indirect,
      {"glVertexAttrib", {gl_vector, 3, gl_short}, array}}
    },
    {"glVertexAttrib4Nbv", {indirect,
      {"glVertexAttribN", {gl_vector, 4, gl_byte}, array}}
    },
    {"glVertexAttrib4Niv", {indirect,
      {"glVertexAttribN", {gl_vector, 4, gl_int}, array}}
    },
    {"glVertexAttrib4Nsv", {indirect,
      {"glVertexAttribN", {gl_vector, 4, gl_short}, array}}
    },
    {"glVertexAttrib4Nub", {indirect, % XXX: Double-check this one.
      {"glVertexAttribN", {gl_vector, 4, gl_ubyte}, element}}
    },
    {"glVertexAttrib4Nubv", {indirect,
      {"glVertexAttribN", {gl_vector, 4, gl_byte}, array}}
    },
    {"glVertexAttrib4Nuiv", {indirect,
      {"glVertexAttribN", {gl_vector, 4, gl_int}, array}}
    },
    {"glVertexAttrib4Nusv", {indirect,
      {"glVertexAttribN", {gl_vector, 4, gl_short}, array}}
    },
    {"glVertexAttrib4bv", {indirect,
      {"glVertexAttrib", {gl_vector, 4, gl_byte}, array}}
    },
    {"glVertexAttrib4d", {indirect,
      {"glVertexAttrib", {gl_vector, 4, gl_double}, element}}
    },
    {"glVertexAttrib4dv", {indirect,
      {"glVertexAttrib", {gl_vector, 4, gl_double}, array}}
    },
    {"glVertexAttrib4f", {indirect,
      {"glVertexAttrib", {gl_vector, 4, gl_float}, element}}
    },
    {"glVertexAttrib4fv", {indirect,
      {"glVertexAttrib", {gl_vector, 4, gl_float}, array}}
    },
    {"glVertexAttrib4iv", {indirect,
      {"glVertexAttrib", {gl_vector, 4, gl_int}, array}}
    },
    {"glVertexAttrib4s", {indirect,
      {"glVertexAttrib", {gl_vector, 4, gl_short}, element}}
    },
    {"glVertexAttrib4sv", {indirect,
      {"glVertexAttrib", {gl_vector, 4, gl_short}, array}}
    },
    {"glVertexAttrib4ubv", {indirect,
      {"glVertexAttrib", {gl_vector, 4, gl_ubyte}, array}}
    },
    {"glVertexAttrib4uiv", {indirect,
      {"glVertexAttrib", {gl_vector, 4, gl_uint}, array}}
    },
    {"glVertexAttrib4usv", {indirect,
      {"glVertexAttrib", {gl_vector, 4, gl_ushort}, array}}
    },
    {"glVertexAttribPointer", {direct, [
      {name, "vertex_attrib_pointer"},
      {params, [
        {in, "Index", gl_uint},
        {in, "Size", gl_int},
        {in, "Type", {gl_enum, "VertexAttribPointerType"}},
        {in, "Normalized", gl_bool},
        {in, "Stride", gl_sizei},
        {in, "Pointer", gl_offset}
      ]},
      {return, gl_void},
      {doc, "Define an array of generic vertex attribute data."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glUniformMatrix2x3fv", {indirect,
      {"glUniformMatrix", {gl_matrix, 2, 3, gl_float}, array}}
    },
    {"glUniformMatrix3x2fv", {indirect,
      {"glUniformMatrix", {gl_matrix, 3, 2, gl_float}, array}}
    },
    {"glUniformMatrix2x4fv", {indirect,
      {"glUniformMatrix", {gl_matrix, 2, 4, gl_float}, array}}
    },
    {"glUniformMatrix4x2fv", {indirect,
      {"glUniformMatrix", {gl_matrix, 4, 2, gl_float}, array}}
    },
    {"glUniformMatrix3x4fv", {indirect,
      {"glUniformMatrix", {gl_matrix, 3, 4, gl_float}, array}}
    },
    {"glUniformMatrix4x3fv", {indirect,
      {"glUniformMatrix", {gl_matrix, 4, 3, gl_float}, array}}
    },
    {"glColorMaski", {direct, [
      {name, "color_mask"},
      {params, [
        {in, "Index", gl_uint},
        {in, "Red", gl_bool},
        {in, "Green", gl_bool},
        {in, "Blue", gl_bool},
        {in, "Alpha", gl_bool}
      ]},
      {return, gl_void},
      {doc, "Enable and disable writing of frame buffer color components."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGetBooleani_v", {direct, [
      {name, "get_boolean"},
      {params, [
        {in, "Target", {gl_enum, "BufferTargetARB"}}, % XXX: specs says `BufferTargetARB`
        {in, "Index", gl_uint},
        {out, "Data", {{list, 1}, gl_bool}}
      ]},
      {return, gl_void}
    ]}},
    {"glGetIntegeri_v", {direct, [
      {name, "get_integer"},
      {params, [
        {in, "Target", {gl_enum, "GetPName"}},
        {in, "Index", gl_uint},
        {out, "Data", {{list, 1}, gl_int}}
      ]},
      {return, gl_void}
    ]}},
    {"glEnablei", {direct, [ % XXX: doc ?
      {name, "enable"},
      {params, [
        {in, "Capability", {gl_enum, "EnableCap"}},
        {in, "Index", gl_uint}
      ]},
      {return, gl_void}
    ]}},
    {"glDisablei", {direct, [ % XXX: doc ?
      {name, "disable"},
      {params, [
        {in, "Capability", {gl_enum, "EnableCap"}},
        {in, "Index", gl_uint}
      ]},
      {return, gl_void}
    ]}},
    {"glIsEnabledi", {direct, [ % XXX: doc ?
      {name, "is_enabled"},
      {params, [
        {in, "Capability", {gl_enum, "EnableCap"}},
        {in, "Index", gl_uint}
      ]},
      {return, gl_bool}
    ]}},
    {"glBeginTransformFeedback", {direct, [
      {name, "begin_transform_feedback"},
      {params, [
        {in, "PrimitiveMode", {gl_enum, "PrimitiveType"}}
      ]},
      {return, gl_void},
      {doc, "Start transform feedback operation."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glEndTransformFeedback", {direct, [ % XXX: no doc ?
      {name, "end_transform_feedback"},
      {params, []},
      {return, gl_void}
    ]}},
    % {"glBindBufferRange", {direct, [ % XXX: NOT DONE
    %   {name, "bind_buffer_range"},
    %   {params, [
    %     {in, "Target", {gl_enum, "BufferTargetARB"}},
    %     {in, "Index", gl_uint},
    %     {in, "Buffer", {gl_object, buffer}},
    %     {in, "Offset", gl_intptr},
    %     {in, "Size", gl_sizeiptr}
    %   ]},
    %   {return, gl_void},
    %   {doc, "Bind a range within a buffer object to an indexed buffer target."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}

    % ]}},
    % {"glBindBufferBase", {direct, [ % XXX: NOT DONE
    %   {name, "bind_buffer_base"},
    %   {params, [
    %     {in, "Target", {gl_enum, "BufferTargetARB"}},
    %     {in, "Index", gl_uint},
    %     {in, "Buffer", {gl_object, buffer}}
    %   ]},
    %   {return, gl_void},
    %   {doc, "Bind a buffer object to an indexed buffer target."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glTransformFeedbackVaryings", {direct, [
    %   {name, "transform_feedback_varyings"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Specify values to record in transform feedback buffers."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetTransformFeedbackVarying", {direct, [
    %   {name, "get_transform_feedback_varying"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Retrieve information about varying variables selected for transform feedback."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glClampColor", {direct, [ % DONE
      {name, "clamp_color"},
      {params, [
        {in, "Target", {gl_enum, "ClampColorTargetARB"}},
        {in, "Clamp", {gl_enum, "ClampColorModeARB"}}
      ]},
      {return, gl_void},
      {doc, "Specify whether data read via."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glBeginConditionalRender", {direct, [
      {name, "begin_conditional_render"},
      {params, [
        {in, "Query", {gl_object, query}},
        {in, "Mode", {gl_enum, "ConditionalRenderMode"}}
      ]},
      {return, gl_void},
      {doc, "Start conditional rendering."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glEndConditionalRender", {direct, [ % XXX: no doc ?
      {name, "end_conditional_render"},
      {params, []},
      {return, gl_void}
    ]}},
    % {"glVertexAttribIPointer", {direct, [ % XXX: No doc ?
    %   {name, "vertex_attrib_i_pointer"},
    %   {params, []},
    %   {return, gl_void}
    % ]}},
    {"glGetVertexAttribIiv", {indirect,
      {"glGetVertexAttribI", gl_int, array}}
    },
    {"glGetVertexAttribIuiv", {indirect,
      {"glGetVertexAttribI", gl_uint, array}}
    },
    {"glVertexAttribI1i", {indirect,
      {"glVertexAttribI", {gl_vector, 1, gl_int}, element}}
    },
    {"glVertexAttribI2i", {indirect,
      {"glVertexAttribI", {gl_vector, 2, gl_int}, element}}
    },
    {"glVertexAttribI3i", {indirect,
      {"glVertexAttribI", {gl_vector, 3, gl_int}, element}}
    },
    {"glVertexAttribI4i", {indirect,
      {"glVertexAttribI", {gl_vector, 4, gl_int}, element}}
    },
    {"glVertexAttribI1ui", {indirect,
      {"glVertexAttribI", {gl_vector, 1, gl_uint}, element}}
    },
    {"glVertexAttribI2ui", {indirect,
      {"glVertexAttribI", {gl_vector, 2, gl_uint}, element}}
    },
    {"glVertexAttribI3ui", {indirect,
      {"glVertexAttribI", {gl_vector, 3, gl_uint}, element}}
    },
    {"glVertexAttribI4ui", {indirect,
      {"glVertexAttribI", {gl_vector, 4, gl_uint}, element}}
    },
    {"glVertexAttribI1iv", {indirect,
      {"glVertexAttribI", {gl_vector, 1, gl_int}, array}}
    },
    {"glVertexAttribI2iv", {indirect,
      {"glVertexAttribI", {gl_vector, 2, gl_int}, array}}
    },
    {"glVertexAttribI3iv", {indirect,
      {"glVertexAttribI", {gl_vector, 3, gl_int}, array}}
    },
    {"glVertexAttribI4iv", {indirect,
      {"glVertexAttribI", {gl_vector, 4, gl_int}, array}}
    },
    {"glVertexAttribI1uiv", {indirect,
      {"glVertexAttribI", {gl_vector, 1, gl_uint}, array}}
    },
    {"glVertexAttribI2uiv", {indirect,
      {"glVertexAttribI", {gl_vector, 2, gl_uint}, array}}
    },
    {"glVertexAttribI3uiv", {indirect,
      {"glVertexAttribI", {gl_vector, 3, gl_uint}, array}}
    },
    {"glVertexAttribI4uiv", {indirect,
      {"glVertexAttribI", {gl_vector, 4, gl_uint}, array}}
    },
    {"glVertexAttribI4bv", {indirect,
      {"glVertexAttribI", {gl_vector, 4, gl_byte}, array}}
    },
    {"glVertexAttribI4sv", {indirect,
      {"glVertexAttribI", {gl_vector, 4, gl_short}, array}}
    },
    {"glVertexAttribI4ubv", {indirect,
      {"glVertexAttribI", {gl_vector, 4, gl_ubyte}, array}}
    },
    {"glVertexAttribI4usv", {indirect,
      {"glVertexAttribI", {gl_vector, 4, gl_ushort}, array}}
    },
    {"glGetUniformuiv", {indirect,
      {"glGetUniform", gl_uint, array}}
    },
    % {"glBindFragDataLocation", [
    %   {name, "bind_frag_data_location"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Bind a user-defined varying out variable to a fragment shader color number."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]},
    % {"glGetFragDataLocation", [
    %   {name, "get_frag_data_location"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Query the bindings of color numbers to user-defined varying out variables."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]},
    {"glUniform1ui", {indirect,
      {"glUniform", {gl_vector, 1, gl_uint}, element}}
    },
    {"glUniform2ui", {indirect,
      {"glUniform", {gl_vector, 2, gl_uint}, element}}
    },
    {"glUniform3ui", {indirect,
      {"glUniform", {gl_vector, 3, gl_uint}, element}}
    },
    {"glUniform4ui", {indirect,
      {"glUniform", {gl_vector, 4, gl_uint}, element}}
    },
    {"glUniform1uiv", {indirect,
      {"glUniform", {gl_vector, 1, gl_uint}, array}}
    },
    {"glUniform2uiv", {indirect,
      {"glUniform", {gl_vector, 2, gl_uint}, array}}
    },
    {"glUniform3uiv", {indirect,
      {"glUniform", {gl_vector, 3, gl_uint}, array}}
    },
    {"glUniform4uiv", {indirect,
      {"glUniform", {gl_vector, 4, gl_uint}, array}}
    },
    {"glTexParameterIiv", {indirect,
      {"glTexParameterI", gl_int, array}}
    },
    {"glTexParameterIuiv", {indirect,
      {"glTexParameterI", gl_uint, array}}
    },
    {"glGetTexParameterIiv", {indirect,
      {"glGetTexParameterI", gl_int, array}}
    },
    {"glGetTexParameterIuiv", {indirect,
      {"glGetTexParameterI", gl_uint, array}}
    },
    {"glClearBufferiv", {indirect,
      {"glClearBuffer", gl_int, array}}
    },
    {"glClearBufferuiv", {indirect,
      {"glClearBuffer", gl_uint, array}}
    },
    {"glClearBufferfv", {indirect,
      {"glClearBuffer", gl_float, array}}
    },
    % XXX: glClearBufferfi() does not follow pattern (glClearNamedFramebufferfi() too btw)
    % {"glClearBufferfi", {"glClearBuffer", "fi"}},
    {"glGetStringi", {direct, [
      {name, "get_string"},
      {params, [
        {in, "Name", {gl_enum, "StringName"}},
        {in, "Index", gl_uint}
      ]},
      {return, {gl_string, glubyte}}, % XXX change to gl_ubyte
      {doc, "Return a string describing the current GL connection."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glIsRenderbuffer", {direct, [
      {name, "is_renderbuffer"},
      {params, [
        {in, "Buffer", {gl_object, render_buffer}}
      ]},
      {return, gl_bool},
      {doc, "Determine if a name corresponds to a renderbuffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glBindRenderbuffer", {direct, [
      {name, "bind_render_buffer"},
      {params, [
        {in, "Target", {gl_enum, "RenderbufferTarget"}},
        {in, "Buffer", {gl_object, render_buffer}}
      ]},
      {return, gl_void},
      {doc, "Bind a renderbuffer to a renderbuffer target."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDeleteRenderbuffers", {direct, [
      {name, "delete_render_buffers"},
      {params, [
        {in, "N", gl_sizei},
        {in, "Buffers", {list, {gl_object, render_buffer}}}
      ]},
      {return, gl_void},
      {doc, "Delete renderbuffer objects."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGenRenderbuffers", {direct, [
      {name, "gen_render_buffers"},
      {params, [
        {out, "Buffers", {{list, 2}, {gl_object, render_buffer}}}
      ]},
      {return, gl_void},
      {doc, "Generate renderbuffer object names."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glRenderbufferStorage", {direct, [
      {name, "render_buffer_storage"},
      {params, [
        {in, "Target", {gl_enum, "RenderbufferTarget"}},
        {in, "InternalFormat", {gl_enum, "InternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Establish data storage, format and dimensions of a
    renderbuffer object's image."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGetRenderbufferParameteriv", {indirect,
      {"glGetRenderbufferParameter", gl_int, array}
    }},
    {"glIsFramebuffer", {direct, [
      {name, "is_framebuffer"},
      {params, [
        {in, "Buffer", {gl_object, frame_buffer}}
      ]},
      {return, gl_bool},
      {doc, "Determine if a name corresponds to a framebuffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glBindFramebuffer", {direct, [
      {name, "bind_framebuffer"},
      {params, [
        {in, "Target", {gl_enum, "FramebufferTarget"}},
        {in, "Buffer", {gl_object, frame_buffer}}
      ]},
      {return, gl_void},
      {doc, "Bind a framebuffer to a framebuffer target."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDeleteFramebuffers", {direct, [
      {name, "delete_framebuffers"},
      {params, [
        {in, "N", gl_sizei},
        {in, "Buffers", {list, {gl_object, frame_buffer}}}
      ]},
      {return, gl_void},
      {doc, "Delete framebuffer objects."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGenFramebuffers", {direct, [
      {name, "gen_framebuffers"},
      {params, [
        {out, "Buffers", {{list, 2}, {gl_object, frame_buffer}}}
      ]},
      {return, gl_void},
      {doc, "Generate framebuffer object names."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCheckFramebufferStatus", {direct, [
      {name, "check_framebuffer_status"},
      {params, [
        {in, "Target", {gl_enum, "FramebufferTarget"}}
      ]},
      {return, {gl_enum, "FramebufferStatus"}},
      {doc, "Check the completeness status of a framebuffer."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glFramebufferTexture1D", {direct, [ % XXX: no doc ?
      {name, "framebuffer_texture_1d"},
      {params, [
        {in, "Target", {gl_enum, "FramebufferTarget"}},
        {in, "Attachment", {gl_enum, "FramebufferAttachment"}},
        {in, "TextureTarget", {gl_enum, "TextureTarget"}},
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int}
      ]},
      {return, gl_void}
    ]}},
    {"glFramebufferTexture2D", {direct, [ % XXX: no doc ?
      {name, "framebuffer_texture_2d"},
      {params, [
        {in, "Target", {gl_enum, "FramebufferTarget"}},
        {in, "Attachment", {gl_enum, "FramebufferAttachment"}},
        {in, "TextureTarget", {gl_enum, "TextureTarget"}},
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int}
      ]},
      {return, gl_void}
    ]}},
    {"glFramebufferTexture3D", {direct, [ % XXX: no doc ?
      {name, "framebuffer_texture_3d"},
      {params, [
        {in, "Target", {gl_enum, "FramebufferTarget"}},
        {in, "Attachment", {gl_enum, "FramebufferAttachment"}},
        {in, "TextureTarget", {gl_enum, "TextureTarget"}},
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int},
        {in, "Layer", gl_int}
      ]},
      {return, gl_void}
    ]}},
    {"glFramebufferRenderbuffer", {direct, [
      {name, "framebuffer_renderbuffer"},
      {params, [
        {in, "Target", {gl_enum, "FramebufferTarget"}},
        {in, "Attachment", {gl_enum, "FramebufferAttachment"}},
        {in, "RenderbufferTarget", {gl_enum, "RenderbufferTarget"}},
        {in, "Renderbuffer", {gl_object, render_buffer}}
      ]},
      {return, gl_void},
      {doc, "Attach a renderbuffer as a logical buffer of a framebuffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGetFramebufferAttachmentParameteriv", {indirect,
      {"glGetFramebufferAttachmentParameter", gl_int, array}
    }},
    {"glGenerateMipmap", {direct, [
      {name, "generate_mipmap"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}}
      ]},
      {return, gl_void},
      {doc, "Generate mipmaps for a specified texture object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glBlitFramebuffer", {direct, [
      {name, "blit_framebuffer"},
      {params, [
        {in, "SrcX0", gl_int},
        {in, "SrcY0", gl_int},
        {in, "SrcX1", gl_int},
        {in, "SrcY1", gl_int},
        {in, "DstX0", gl_int},
        {in, "DstY0", gl_int},
        {in, "DstX1", gl_int},
        {in, "DstY1", gl_int},
        {in, "Mask", {gl_bitfield, "ClearBufferMask"}},
        {in, "Filter", {gl_enum, "BlitFramebufferFilter"}}
      ]},
      {return, gl_void},
      {doc, "Copy a block of pixels from one framebuffer object to another."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glRenderbufferStorageMultisample", {direct, [
      {name, "renderbuffer_storage_multisample"},
      {params, [
        {in, "Target", {gl_enum, "RenderbufferTarget"}},
        {in, "Samples", gl_sizei},
        {in, "InternalFormat", {gl_enum, "InternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Establish data storage, format, dimensions and sample count of
    a renderbuffer object's image."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glFramebufferTextureLayer", {direct, [
      {name, "framebuffer_texture_layer"},
      {params, [
        {in, "Target", {gl_enum, "FramebufferTarget"}},
        {in, "Attachment", {gl_enum, "FramebufferAttachment"}},
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int},
        {in, "Layer", gl_int}
      ]},
      {return, gl_void},
      {doc, "Attach a single layer of a texture object as a logical buffer of a framebuffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glMapBufferRange", [
    %   {name, "map_buffer_range"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Map all or part of a buffer object's data store into the client's address space."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]},
    % {"glFlushMappedBufferRange", {direct, [ % XXX: NOT DONE
    %   {name, "flush_mapped_buffer_range"},
    %   {params, [
    %     {in, "Target", {gl_enum, "BufferTargetARB"}},
    %     {in, "Offset", gl_intptr},
    %     {in, "Length", gl_sizeiptr}
    %   ]},
    %   {return, gl_void},
    %   {doc, "Indicate modifications to a range of a mapped buffer."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glBindVertexArray", {direct, [
      {name, "bind_vertex_array"},
      {params, [
        {in, "Array", {gl_object, vertex_array}}
      ]},
      {return, gl_void},
      {doc, "Bind a vertex array object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDeleteVertexArrays", {direct, [
      {name, "delete_vertex_arrays"},
      {params, [
        {in, "N", gl_sizei},
        {in, "Arrays", {list, {gl_object, vertex_array}}}
      ]},
      {return, gl_void},
      {doc, "Delete vertex array objects."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGenVertexArrays", {direct, [
      {name, "gen_vertex_arrays"},
      {params, [
        {out, "Arrays", {{list, 2}, {gl_object, vertex_array}}}
        % {out, "Arrays", {{list, 1}, gl_uint}} % XXX: FIx this
      ]},
      {return, gl_void},
      {doc, "Generate vertex array object names."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glIsVertexArray", {direct, [
      {name, "is_vertex_array"},
      {params, [
        {in, "Array", {gl_object, vertex_array}}
      ]},
      {return, gl_bool},
      {doc, "Determine if a name corresponds to a vertex array object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDrawArraysInstanced", {direct, [
      {name, "draw_arrays_instanced"},
      {params, [
        {in, "Mode", {gl_enum, "PrimitiveType"}},
        {in, "First", gl_int},
        {in, "Count", gl_sizei},
        {in, "InstanceCount", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Draw multiple instances of a range of elements."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glDrawElementsInstanced", {direct, [
    %   {name, "draw_elements_instanced"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Draw multiple instances of a set of elements."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glTexBuffer", {direct, [
      {name, "tex_buffer"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "InternalFormat", {gl_enum, "SizedInternalFormat"}},
        {in, "Buffer", {gl_object, buffer}}
      ]},
      {return, gl_void},
      {doc, "Attach a buffer object's data store to a buffer texture object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glPrimitiveRestartIndex", {direct, [
      {name, "primitive_restart_index"},
      {params, [
        {in, "Index", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Specify the primitive restart index."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCopyBufferSubData", {direct, [
      {name, "copy_buffer_sub_data"},
      {params, [
        {in, "ReadTarget", {gl_enum, "CopyBufferSubDataTarget"}},
        {in, "WriteTarget", {gl_enum, "CopyBufferSubDataTarget"}},
        {in, "ReadOffset", gl_intptr},
        {in, "WriteOffset", gl_intptr},
        {in, "Size", gl_sizeiptr}
      ]},
      {return, gl_void},
      {doc, "Copy all or part of the data store of a buffer object to the data store of another buffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}

    ]}},
    % {"glGetUniformIndices", {direct, [
    %   {name, "get_uniform_indices"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Retrieve the index of a named uniform block."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetActiveUniformsiv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Returns information about several active uniform variables for the specified program object."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]},
    % {"glGetActiveUniformName", {direct, [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Query the name of an active uniform."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetUniformBlockIndex", {direct, [ %%%: NOT DONE
    %   {name, "my_func"},
    %   {params, [
    %     {in, "Program", {gl_object, program}},
    %     {in, "UniformBlockName", gl_string}
    %   ]},
    %   {return, gl_int},
    %   {doc, "Retrieve the index of a named uniform block."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetActiveUniformBlockiv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Query information about an active uniform block."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]},
    % {"glGetActiveUniformBlockName", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Retrieve the name of an active uniform block."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]},
    % {"glUniformBlockBinding", [
    %   {name, "uniform_block_binding"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Assign a binding point to an active uniform block."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]},
    % {"glDrawElementsBaseVertex", {direct, [
    %   {name, "draw_elements_base_vertex"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Render primitives from array data with a per-element offset."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glDrawRangeElementsBaseVertex", {direct, [
    %   {name, "draw_range_elements_base_vertex"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Render primitives from array data with a per-element offset."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glDrawElementsInstancedBaseVertex", {direct, [
    %   {name, "draw_elements_instanced_base_vertex"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Render multiple instances of a set of primitives from array data with a per-element offset."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glMultiDrawElementsBaseVertex", {direct, [
    %   {name, "multi_draw_elements_base_vertex"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glProvokingVertex", {direct, [
      {name, "provoking_vertex"},
      {params, [
        {in, "Mode", {gl_enum, "VertexProvokingMode"}}
      ]},
      {return, gl_void},
      {doc, "Specifiy the vertex to be used as the source of data for flat shaded varyings."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glFenceSync", {direct, [
      {name, "fence_sync"},
      {params, [
        {in, "Condition", {gl_enum, "SyncCondition"}},
        {in, "Flags", {gl_bitfield, "SyncBehaviorFlags"}}
      ]},
      {return, {gl_object, sync}},
      {doc, "Create a new sync object and insert it into the GL command stream."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glIsSync", {direct, [
      {name, "is_sync"},
      {params, [
        {in, "Sync", {gl_object, sync}}
      ]},
      {return, gl_bool},
      {doc, "Determine if a name corresponds to a sync object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDeleteSync", {direct, [
      {name, "delete_sync"},
      {params, [
        {in, "Sync", {gl_object, sync}}
      ]},
      {return, gl_void},
      {doc, "Delete a sync object."},
      {example, """
      gl:foobar(abc, xyz).
      """}

    ]}},
    {"glClientWaitSync", {direct, [
      {name, "client_wait_sync"},
      {params, [
        {in, "Sync", {gl_object, sync}},
        {in, "Flags", {gl_bitfield, "SyncObjectMask"}},
        {in, "Timeout", gl_uint64}
      ]},
      {return, {gl_enum, "SyncStatus"}},
      {doc, "Block and wait for a sync object to become signaled."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glWaitSync", {direct, [
      {name, "wait_sync"},
      {params, [
        {in, "Sync", {gl_object, sync}},
        {in, "Flags", {gl_bitfield, "SyncBehaviorFlags"}},
        {in, "Timeout", gl_uint64}
      ]},
      {return, gl_void},
      {doc, "Instruct the GL server to block until the specified sync object becomes signaled."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGetInteger64v", {direct, [
      {name, "get_integer64"},
      {params, [
        {in, "PName", {gl_enum, "GetPName"}},
        {out, "Data", {{list, 1}, gl_int64}}
      ]},
      {return, gl_void}
    ]}},
    % {"glGetSynciv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Query the properties of a sync object."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]},
    {"glGetInteger64i_v", {direct, [
      {name, "get_integer64"},
      {params, [
        {in, "Target", {gl_enum, "GetPName"}},
        {in, "Index", gl_uint},
        {out, "Data", {{list, 1}, gl_int64}}
      ]},
      {return, gl_void}
    ]}},
    {"glGetBufferParameteri64v", {indirect,
      {"glGetBufferParameter", gl_int64, array}
    }},
    {"glFramebufferTexture", {direct, [ % DONE
      {name, "framebuffer_texture"},
      {params, [
        {in, "Target", {gl_enum, "FramebufferTarget"}},
        {in, "Attachment", {gl_enum, "FramebufferAttachment"}},
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int}
      ]},
      {return, gl_void},
      {doc, "Attach a level of a texture object as a logical buffer of a framebuffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTexImage2DMultisample", {direct, [
      {name, "tex_image_2d_multisample"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Samples", gl_sizei},
        {in, "InternalFormat", {gl_enum, "InternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "FixedSampleLocations", gl_bool}
      ]},
      {return, gl_void},
      {doc, "Establish the data storage, format, dimensions, and number of samples of a multisample texture's image."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTexImage3DMultisample", {direct, [
      {name, "tex_image_3d_multisample"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Samples", gl_sizei},
        {in, "InternalFormat", {gl_enum, "InternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Depth", gl_sizei},
        {in, "FixedSampleLocations", gl_bool}
      ]},
      {return, gl_void},
      {doc, "Establish the data storage, format, dimensions, and number of samples of a multisample texture's image."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glGetMultisamplefv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glSampleMaski", [ % XXX: double-check this one
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glBindFragDataLocationIndexed", {direct, [
    %   {name, "bind_frag_data_location_indexed"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Bind a user-defined varying out variable to a fragment shader color number and index."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetFragDataIndex", {direct, [
    %   {name, "get_frag_data_index"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Query the bindings of color indices to user-defined varying out variables."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glGenSamplers", {direct, [
      {name, "gen_samplers"},
      {params, [
        {out, "Samplers", {{list, 2}, {gl_object, sampler}}}
      ]},
      {return, gl_void},
      {doc, "Generate sampler object names."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDeleteSamplers", {direct, [
      {name, "delete_samplers"},
      {params, [
        {in, "N", gl_sizei},
        {in, "Samplers", {list, {gl_object, sampler}}}
      ]},
      {return, gl_void},
      {doc, "Delete named sampler objects."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glIsSampler", {direct, [
      {name, "is_sampler"},
      {params, [
        {in, "Sampler", {gl_object, sampler}}
      ]},
      {return, gl_bool},
      {doc, "Determine if a name corresponds to a sampler object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glBindSampler", {direct, [ % XXX: NOT DONE
    %   {name, "bind_sampler"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Bind a named sampler to a texturing target."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glSamplerParameteri", {indirect,
      {"glSamplerParameter", gl_int, element}}
    },
    {"glSamplerParameteriv", {indirect,
      {"glSamplerParameter", gl_int, array}}
    },
    {"glSamplerParameterf", {indirect,
      {"glSamplerParameter", gl_float, element}}
    },
    {"glSamplerParameterfv", {indirect,
      {"glSamplerParameter", gl_float, array}}
    },
    {"glSamplerParameterIiv", {indirect,
      {"glSamplerParameterI", gl_int, array}}
    },
    {"glSamplerParameterIuiv", {indirect,
      {"glSamplerParameterI", gl_uint, array}}
    },
    {"glGetSamplerParameteriv", {indirect,
      {"glGetSamplerParameter", gl_int, array}}
    },
    {"glGetSamplerParameterIiv", {indirect,
      {"glGetSamplerParameterI", gl_int, array}}
    },
    {"glGetSamplerParameterfv", {indirect,
      {"glGetSamplerParameter", gl_float, array}}
    },
    {"glGetSamplerParameterIuiv", {indirect,
      {"glGetSamplerParameterI", gl_uint, array}}
    },
    {"glQueryCounter", {direct, [
      {name, "query_counter"},
      {params, [
        {in, "Query", {gl_object, query}},
        {in, "Target", {gl_enum, "QueryCounterTarget"}}
      ]},
      {return, gl_void},
      {doc, "Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGetQueryObjecti64v", {indirect,
      {"glGetQueryObject", gl_int64, array}}
    },
    {"glGetQueryObjectui64v", {indirect,
      {"glGetQueryObject", gl_uint64, array}}
    },
    {"glVertexAttribDivisor", {direct, [
      {name, "vertex_attrib_divisor"},
      {params, [
        {in, "Index", gl_uint},
        {in, "Divisor", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Modify the rate at which generic vertex attributes advance during instanced rendering."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glVertexAttribP1ui", {indirect,
      {"glVertexAttribP", {gl_vector, 1, gl_uint}, element}}
    },
    {"glVertexAttribP1uiv", {indirect,
      {"glVertexAttribP", {gl_vector, 1, gl_uint}, array}}
    },
    {"glVertexAttribP2ui", {indirect,
      {"glVertexAttribP", {gl_vector, 2, gl_uint}, element}}
    },
    {"glVertexAttribP2uiv", {indirect,
      {"glVertexAttribP", {gl_vector, 2, gl_uint}, array}}
    },
    {"glVertexAttribP3ui", {indirect,
      {"glVertexAttribP", {gl_vector, 3, gl_uint}, element}}
    },
    {"glVertexAttribP3uiv", {indirect,
      {"glVertexAttribP", {gl_vector, 3, gl_uint}, array}}
    },
    {"glVertexAttribP4ui", {indirect,
      {"glVertexAttribP", {gl_vector, 4, gl_uint}, element}}
    },
    {"glVertexAttribP4uiv", {indirect,
      {"glVertexAttribP", {gl_vector, 4, gl_uint}, array}}
    },
    % Items for OpenGL 4.1.
    {"glMinSampleShading", {direct, [
      {name, "min_sample_shading"},
      {params, [
        {in, "Value", gl_float}
      ]},
      {return, gl_void},
      {doc, "Specifies minimum rate at which sample shading takes place."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glBlendEquationi", {direct, [
      {name, "blend_equation"},
      {params, [
        {in, "Buffer", gl_uint},
        {in, "Mode", {gl_enum, "BlendEquationModeEXT"}}
      ]},
      {return, gl_void},
      {doc, "Specify the equation used for both the RGB blend equation and the Alpha blend equation."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glBlendEquationSeparatei", {direct, [
      {name, "blend_equation_separate"},
      {params, [
        {in, "Buffer", gl_uint},
        {in, "ModeRGB", {gl_enum, "BlendEquationModeEXT"}},
        {in, "ModeAlpha", {gl_enum, "BlendEquationModeEXT"}}
      ]},
      {return, gl_void},
      {doc, "Set the RGB blend equation and the alpha blend equation separately."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glBlendFunci", {direct, [
      {name, "blend_func"},
      {params, [
        {in, "Buffer", gl_uint},
        {in, "SourceFactor", {gl_enum, "BlendingFactor"}},
        {in, "DestinationFactor", {gl_enum, "BlendingFactor"}}
      ]},
      {return, gl_void},
      {doc, "Specify pixel arithmetic."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glBlendFuncSeparatei", {direct, [
      {name, "blend_func_separate"},
      {params, [
        {in, "Buffer", gl_uint},
        {in, "SourceRGB", {gl_enum, "BlendingFactor"}},
        {in, "DestinationRGB", {gl_enum, "BlendingFactor"}},
        {in, "SourceAlpha", {gl_enum, "BlendingFactor"}},
        {in, "DestinationAlpha", {gl_enum, "BlendingFactor"}}
      ]},
      {return, gl_void},
      {doc, "Specify pixel arithmetic for RGB and alpha components separately."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glDrawArraysIndirect", {direct, [
    %   {name, "draw_arrays_indirect"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Render primitives from array data, taking parameters from memory."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glDrawElementsIndirect", {direct, [
    %   {name, "draw_elements_indirect"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Render indexed primitives from array data, taking parameters from memory."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glUniform1d", {indirect,
      {"glUniform", {gl_vector, 1, gl_double}, element}}
    },
    {"glUniform2d", {indirect,
      {"glUniform", {gl_vector, 2, gl_double}, element}}
    },
    {"glUniform3d", {indirect,
      {"glUniform", {gl_vector, 3, gl_double}, element}}
    },
    {"glUniform4d", {indirect,
      {"glUniform", {gl_vector, 4, gl_double}, element}}
    },
    {"glUniform1dv", {indirect,
      {"glUniform", {gl_vector, 1, gl_double}, array}}
    },
    {"glUniform2dv", {indirect,
      {"glUniform", {gl_vector, 2, gl_double}, array}}
    },
    {"glUniform3dv", {indirect,
      {"glUniform", {gl_vector, 3, gl_double}, array}}
    },
    {"glUniform4dv", {indirect,
      {"glUniform", {gl_vector, 4, gl_double}, array}}
    },
    {"glUniformMatrix2dv", {indirect,
      {"glUniformMatrix", {gl_matrix, 2, 2, gl_double}, array}}
    },
    {"glUniformMatrix3dv", {indirect,
      {"glUniformMatrix", {gl_matrix, 3, 3, gl_double}, array}}
    },
    {"glUniformMatrix4dv", {indirect,
      {"glUniformMatrix", {gl_matrix, 4, 4, gl_double}, array}}
    },
    {"glUniformMatrix2x3dv", {indirect,
      {"glUniformMatrix", {gl_matrix, 2, 3, gl_double}, array}}
    },
    {"glUniformMatrix2x4dv", {indirect,
      {"glUniformMatrix", {gl_matrix, 2, 4, gl_double}, array}}
    },
    {"glUniformMatrix3x2dv", {indirect,
      {"glUniformMatrix", {gl_matrix, 3, 2, gl_double}, array}}
    },
    {"glUniformMatrix3x4dv", {indirect,
      {"glUniformMatrix", {gl_matrix, 3, 4, gl_double}, array}}
    },
    {"glUniformMatrix4x2dv", {indirect,
      {"glUniformMatrix", {gl_matrix, 4, 2, gl_double}, array}}
    },
    {"glUniformMatrix4x3dv", {indirect,
      {"glUniformMatrix", {gl_matrix, 4, 3, gl_double}, array}}
    },
    {"glGetUniformdv", {indirect,
      {"glGetUniform", gl_double, array}}
    },
    % {"glGetSubroutineUniformLocation", [
    %   {name, "get_subroutine_uniform_location"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Retrieve the location of a subroutine uniform of a given shader stage within a program."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]},
    % {"glGetSubroutineIndex", [
    %   {name, "get_subroutine_index"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Retrieve the index of a subroutine uniform of a given shader stage within a program."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]},
    % {"glGetActiveSubroutineUniformiv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glGetActiveSubroutineUniformName", [
    %   {name, "get_active_subroutine_uniform_name"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Query the name of an active shader subroutine uniform."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]},
    % {"glGetActiveSubroutineName", [
    %   {name, "get_active_subroutine_name"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Query the name of an active shader subroutine."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]},
    % {"glUniformSubroutinesuiv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glGetUniformSubroutineuiv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glGetProgramStageiv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    {"glPatchParameteri", {indirect,
      {"glPatchParameter", gl_int, element}
    }},
    {"glPatchParameterfv", {indirect,
      {"glPatchParameter", gl_float, array}
    }},
    {"glBindTransformFeedback", {direct, [
      {name, "bind_transform_feedback"},
      {params, [
        {in, "Target", {gl_enum, "BindTransformFeedbackTarget"}},
        {in, "Feedback", {gl_object, transform_feedback}}
      ]},
      {return, gl_void},
      {doc, "Bind a transform feedback object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDeleteTransformFeedbacks", {direct, [
      {name, "delete_transform_feedbacks"},
      {params, [
        {in, "N", gl_sizei},
        {in, "Feedbacks", {list, {gl_object, transform_feedback}}}
      ]},
      {return, gl_void},
      {doc, "Delete transform feedback objects."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGenTransformFeedbacks", {direct, [
      {name, "gen_transform_feedbacks"},
      {params, [
        {out, "Feedbacks", {{list, 2}, {gl_object, transform_feedback}}}
      ]},
      {return, gl_void},
      {doc, "Reserve transform feedback object names."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glIsTransformFeedback", {direct, [
      {name, "is_transform_feedback"},
      {params, [
        {in, "Feedback", {gl_object, transform_feedback}}
      ]},
      {return, gl_bool},
      {doc, "Determine if a name corresponds to a transform feedback object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glPauseTransformFeedback", {direct, [ % DONE
      {name, "pause_transform_feedback"},
      {params, []},
      {return, gl_void},
      {doc, "Pause transform feedback operations."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glResumeTransformFeedback", {direct, [ % DONE
      {name, "resume_transform_feedback"},
      {params, []},
      {return, gl_void},
      {doc, "Resume transform feedback operations."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDrawTransformFeedback", {direct, [
      {name, "draw_transform_feedback"},
      {params, [
        {in, "Mode", {gl_enum, "PrimitiveType"}},
        {in, "Feedback", {gl_object, transform_feedback}}
      ]},
      {return, gl_void},
      {doc, "Render primitives using a count derived from a transform feedback object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDrawTransformFeedbackStream", {direct, [
      {name, "draw_transform_feedback_stream"},
      {params, [
        {in, "Mode", {gl_enum, "PrimitiveType"}},
        {in, "Feedback", {gl_object, transform_feedback}},
        {in, "Stream", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Render primitives using a count derived from a specifed stream of a transform feedback object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glBeginQueryIndexed", {direct, [
      {name, "begin_query_indexed"},
      {params, [
        {in, "Target", {gl_enum, "QueryTarget"}},
        {in, "Index", gl_uint},
        {in, "Query", {gl_object, query}}
      ]},
      {return, gl_void},
      {doc, "Delimit the boundaries of a query object on an indexed target."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glEndQueryIndexed", {direct, [
      {name, "end_query_indexed"},
      {params, [
        {in, "Target", {gl_enum, "QueryTarget"}},
        {in, "Index", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Delimit the boundaries of a query object on an indexed target."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glGetQueryIndexediv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    {"glReleaseShaderCompiler", {direct, [
      {name, "release_shader_compiler"},
      {params, []},
      {return, gl_void},
      {doc, "Release resources consumed by the implementation's shader compiler."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glShaderBinary", {direct, [
    %   {name, "shader_binary"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Load pre-compiled shader binaries."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetShaderPrecisionFormat", {direct, [
    %   {name, "get_shader_precision_format"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Retrieve the range and precision for numeric formats supported by the shader compiler."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glDepthRangef", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glClearDepthf", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glGetProgramBinary", {direct, [
    %   {name, "get_program_binary"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Return a binary representation of a program object's compiled and linked executable source."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glProgramBinary", {direct, [
    %   {name, "program_binary"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Load a program object with a program binary."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glProgramParameteri", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    {"glUseProgramStages", {direct, [
      {name, "use_program_stages"},
      {params, [
        {in, "Pipeline", {gl_object, program_pipeline}},
        {in, "Stages", {gl_bitfield, "UseProgramStageMask"}},
        {in, "Program", {gl_object, program}}
      ]},
      {return, gl_void},
      {doc, "Bind stages of a program object to a program pipeline."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glActiveShaderProgram", {direct, [
      {name, "active_shader_program"},
      {params, [
        {in, "Pipeline", {gl_object, program_pipeline}},
        {in, "Program", {gl_object, program}}
      ]},
      {return, gl_void},
      {doc, "Set the active program object for a program pipeline object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glCreateShaderProgramv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    {"glBindProgramPipeline", {direct, [
      {name, "bind_program_pipeline"},
      {params, [
        {in, "Pipeline", {gl_object, program_pipeline}}
      ]},
      {return, gl_void},
      {doc, "Bind a program pipeline to the current context."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDeleteProgramPipelines", {direct, [
      {name, "delete_program_pipelines"},
      {params, [
        {in, "N", gl_sizei},
        {in, "Pipelines", {list, {gl_object, program_pipeline}}}
      ]},
      {return, gl_void},
      {doc, "Delete program pipeline objects."},
      {example, """
      gl:foobar(abc, xyz).
      """}

    ]}},
    {"glGenProgramPipelines", {direct, [
      {name, "gen_program_pipelines"},
      {params, [
        {out, "Pipelines", {{list, 2}, {gl_object, program_pipeline}}}
      ]},
      {return, gl_void},
      {doc, "Reserve program pipeline object names."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glIsProgramPipeline", {direct, [
      {name, "is_program_pipeline"},
      {params, [
        {in, "Piepline", {gl_object, program_pipeline}}
      ]},
      {return, gl_bool},
      {doc, "Determine if a name corresponds to a program pipeline object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glGetProgramPipelineiv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glProgramParameteri", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    {"glProgramUniform1i", {indirect,
      {"glProgramUniform", {gl_vector, 1, gl_int}, element}
    }},
    {"glProgramUniform1iv", {indirect,
      {"glProgramUniform", {gl_vector, 1, gl_int}, array}
    }},
    {"glProgramUniform1f", {indirect,
      {"glProgramUniform", {gl_vector, 1, gl_float}, element}
    }},
    {"glProgramUniform1fv", {indirect,
      {"glProgramUniform", {gl_vector, 1, gl_float}, array}
    }},
    {"glProgramUniform1d", {indirect,
      {"glProgramUniform", {gl_vector, 1, gl_double}, element}
    }},
    {"glProgramUniform1dv", {indirect,
      {"glProgramUniform", {gl_vector, 1, gl_double}, array}
    }},
    {"glProgramUniform1ui", {indirect,
      {"glProgramUniform", {gl_vector, 1, gl_uint}, element}
    }},
    {"glProgramUniform1uiv", {indirect,
      {"glProgramUniform", {gl_vector, 1, gl_uint}, array}
    }},
    {"glProgramUniform2i", {indirect,
      {"glProgramUniform", {gl_vector, 2, gl_int}, element}
    }},
    {"glProgramUniform2iv", {indirect,
      {"glProgramUniform", {gl_vector, 2, gl_int}, array}
    }},
    {"glProgramUniform2f", {indirect,
      {"glProgramUniform", {gl_vector, 2, gl_float}, element}
    }},
    {"glProgramUniform2fv", {indirect,
      {"glProgramUniform", {gl_vector, 2, gl_float}, array}
    }},
    {"glProgramUniform2d", {indirect,
      {"glProgramUniform", {gl_vector, 2, gl_double}, element}
    }},
    {"glProgramUniform2dv", {indirect,
      {"glProgramUniform", {gl_vector, 2, gl_double}, array}
    }},
    {"glProgramUniform2ui", {indirect,
      {"glProgramUniform", {gl_vector, 2, gl_uint}, element}
    }},
    {"glProgramUniform2uiv", {indirect,
      {"glProgramUniform", {gl_vector, 2, gl_uint}, array}
    }},
    {"glProgramUniform3i", {indirect,
      {"glProgramUniform", {gl_vector, 3, gl_int}, element}
    }},
    {"glProgramUniform3iv", {indirect,
      {"glProgramUniform", {gl_vector, 3, gl_int}, array}
    }},
    {"glProgramUniform3f", {indirect,
      {"glProgramUniform", {gl_vector, 3, gl_float}, element}
    }},
    {"glProgramUniform3fv", {indirect,
      {"glProgramUniform", {gl_vector, 3, gl_float}, array}
    }},
    {"glProgramUniform3d", {indirect,
      {"glProgramUniform", {gl_vector, 3, gl_double}, element}
    }},
    {"glProgramUniform3dv", {indirect,
      {"glProgramUniform", {gl_vector, 3, gl_double}, array}
    }},
    {"glProgramUniform3ui", {indirect,
      {"glProgramUniform", {gl_vector, 3, gl_uint}, element}
    }},
    {"glProgramUniform3uiv", {indirect,
      {"glProgramUniform", {gl_vector, 3, gl_uint}, array}
    }},
    {"glProgramUniform4i", {indirect,
      {"glProgramUniform", {gl_vector, 4, gl_int}, element}
    }},
    {"glProgramUniform4iv", {indirect,
      {"glProgramUniform", {gl_vector, 4, gl_int}, array}
    }},
    {"glProgramUniform4f", {indirect,
      {"glProgramUniform", {gl_vector, 4, gl_float}, element}
    }},
    {"glProgramUniform4fv", {indirect,
      {"glProgramUniform", {gl_vector, 4, gl_float}, array}
    }},
    {"glProgramUniform4d", {indirect,
      {"glProgramUniform", {gl_vector, 4, gl_double}, element}
    }},
    {"glProgramUniform4dv", {indirect,
      {"glProgramUniform", {gl_vector, 4, gl_double}, array}
    }},
    {"glProgramUniform4ui", {indirect,
      {"glProgramUniform", {gl_vector, 4, gl_uint}, element}
    }},
    {"glProgramUniform4uiv", {indirect,
      {"glProgramUniform", {gl_vector, 4, gl_uint}, array}
    }},
    {"glProgramUniformMatrix2fv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 2, 2, gl_float}, array}
    }},
    {"glProgramUniformMatrix3fv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 3, 3, gl_float}, array}
    }},
    {"glProgramUniformMatrix4fv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 4, 4, gl_float}, array}
    }},
    {"glProgramUniformMatrix2dv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 2, 2, gl_double}, array}
    }},
    {"glProgramUniformMatrix3dv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 3, 3, gl_double}, array}
    }},
    {"glProgramUniformMatrix4dv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 4, 4, gl_double}, array}
    }},
    {"glProgramUniformMatrix2x3fv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 2, 3, gl_float}, array}
    }},
    {"glProgramUniformMatrix3x2fv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 3, 2, gl_float}, array}
    }},
    {"glProgramUniformMatrix2x4fv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 2, 4, gl_float}, array}
    }},
    {"glProgramUniformMatrix4x2fv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 4, 2, gl_float}, array}
    }},
    {"glProgramUniformMatrix3x4fv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 3, 4, gl_float}, array}
    }},
    {"glProgramUniformMatrix4x3fv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 4, 3, gl_float}, array}
    }},
    {"glProgramUniformMatrix2x3dv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 2, 3, gl_double}, array}
    }},
    {"glProgramUniformMatrix3x2dv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 3, 2, gl_double}, array}
    }},
    {"glProgramUniformMatrix2x4dv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 2, 4, gl_double}, array}
    }},
    {"glProgramUniformMatrix4x2dv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 4, 2, gl_double}, array}
    }},
    {"glProgramUniformMatrix3x4dv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 3, 4, gl_double}, array}
    }},
    {"glProgramUniformMatrix4x3dv", {indirect,
      {"glProgramUniformMatrix", {gl_matrix, 4, 3, gl_double}, array}
    }},
    {"glValidateProgramPipeline", {direct, [
      {name, "validate_program_pipeline"},
      {params, [
        {in, "Pipeline", {gl_object, program_pipeline}}
      ]},
      {return, gl_void},
      {doc, "Validate a program pipeline object against current GL state."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGetProgramPipelineInfoLog", {direct, [
      {name, "get_program_pipeline_info_log"},
      {params, [
        {in, "Pipeline", {gl_object, program_pipeline}},
        {out, "InfoLog", gl_string}
      ]},
      {return, gl_void},
      {doc, "Retrieve the info log string from a program pipeline object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glVertexAttribL1d", {indirect, {"glVertexAttribL", {gl_vector, 1, gl_double}, element}
    }},
    {"glVertexAttribL2d", {indirect, {"glVertexAttribL", {gl_vector, 2, gl_double}, element}
    }},
    {"glVertexAttribL3d", {indirect, {"glVertexAttribL", {gl_vector, 3, gl_double}, element}
    }},
    {"glVertexAttribL4d", {indirect, {"glVertexAttribL", {gl_vector, 4, gl_double}, element}
    }},
    {"glVertexAttribL1dv", {indirect, {"glVertexAttribL", {gl_vector, 1, gl_double}, array}
    }},
    {"glVertexAttribL2dv", {indirect, {"glVertexAttribL", {gl_vector, 2, gl_double}, array}
    }},
    {"glVertexAttribL3dv", {indirect, {"glVertexAttribL", {gl_vector, 3, gl_double}, array}
    }},
    {"glVertexAttribL4dv", {indirect, {"glVertexAttribL", {gl_vector, 4, gl_double}, array}
    }},
    {"glVertexAttribLPointer", {direct, [ % XXX: no doc ?
      {name, "vertex_attrib_l_pointer"},
      {params, []},
      {return, gl_void}
    ]}},
    % {"glGetVertexAttribLdv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glViewportArrayv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glViewportIndexedf", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glViewportIndexedfv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glScissorArrayv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    {"glScissorIndexed", {direct, [
      {name, "scissor_indexed"},
      {params, [
        {in, "Index", gl_uint},
        {in, "Left", gl_int},
        {in, "Bottom", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Define the scissor box for a specific viewport."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glScissorIndexedv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glDepthRangeArrayv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    {"glDepthRangeIndexed", {direct, [
      {name, "depth_range_indexed"},
      {params, [
        {in, "Index", gl_uint},
        {in, "Near", gl_double},
        {in, "Far", gl_double}
      ]},
      {return, gl_void},
      {doc, "Specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGetFloati_v", {direct, [
      {name, "get_float"},
      {params, [
        {in, "Target", {gl_enum, "GetPName"}},
        {in, "Index", gl_uint},
        {out, "Data", {{list, 1}, gl_float}}
      ]},
      {return, gl_void}
    ]}},
    {"glGetDoublei_v", {direct, [
      {name, "get_double"},
      {params, [
        {in, "Target", {gl_enum, "GetPName"}},
        {in, "Index", gl_uint},
        {out, "Data", {{list, 1}, gl_double}}
      ]},
      {return, gl_void}
    ]}},
    % Items for OpenGL 4.6.
    {"glDrawArraysInstancedBaseInstance", {direct, [
      {name, "draw_arrays_instanced_base_instance"},
      {params, [
        {in, "Mode", {gl_enum, "PrimitiveType"}},
        {in, "First", gl_int},
        {in, "Count", gl_sizei},
        {in, "InstanceCount", gl_sizei},
        {in, "BaseInstance", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Draw multiple instances of a range of elements with offset applied to instanced attributes."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glDrawElementsInstancedBaseInstance", {direct, [
    %   {name, "draw_elements_instanced_base_instance"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Draw multiple instances of a set of elements with offset applied to instanced attributes."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glDrawElementsInstancedBaseVertexBaseInstance", {direct, [
    %   {name, "draw_elements_instanced_base_vertex_base_instance"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Render multiple instances of a set of primitives from array data with a per-element offset."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetInternalformativ", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glGetActiveAtomicCounterBufferiv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glBindImageTexture", {direct, [
    %   {name, "bind_image_texture"},
    %   {params, [
    %     {in, "Unit", gl_uint},
    %     {in, "Texture", {gl_object, texture}},
    %     {in, "Level", gl_int},
    %     {in, "Layered", gl_bool},
    %     {in, "Layer", gl_int},
    %     {in, "Access", {gl_enum, "BufferAccessARB"}},
    %     {in, "Format", {gl_enum, "InternalFormat"}}
    %   ]},
    %   {return, gl_void},
    %   {doc, "Bind a level of a texture to an image unit."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glMemoryBarrier", {direct, [
      {name, "memory_barrier"},
      {params, [
        {in, "Barriers", {gl_bitfield, "MemoryBarrierMask"}}
      ]},
      {return, gl_void},
      {doc, "Defines a barrier ordering memory transactions."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTexStorage1D", {direct, [
      {name, "tex_storage_1d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Levels", gl_sizei},
        {in, "InternalFormat", {gl_enum, "SizedInternalFormat"}},
        {in, "Width", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Simultaneously specify storage for all levels of a one-dimensional texture."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTexStorage2D", {direct, [
      {name, "tex_storage_2d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Levels", gl_sizei},
        {in, "InternalFormat", {gl_enum, "SizedInternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTexStorage3D", {direct, [
      {name, "tex_storage_3d"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Levels", gl_sizei},
        {in, "InternalFormat", {gl_enum, "SizedInternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Depth", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDrawTransformFeedbackInstanced", {direct, [
      {name, "draw_transform_feedback_instanced"},
      {params, [
        {in, "Mode", {gl_enum, "PrimitiveType"}},
        {in, "Feedback", {gl_object, transform_feedback}},
        {in, "InstanceCount", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Render multiple instances of primitives using a count derived from a transform feedback object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDrawTransformFeedbackStreamInstanced", {direct, [
      {name, "draw_transform_feedback_stream_instanced"},
      {params, [
        {in, "Mode", {gl_enum, "PrimitiveType"}},
        {in, "Feedback", {gl_object, transform_feedback}},
        {in, "Stream", gl_uint},
        {in, "InstanceCount", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Render multiple instances of primitives using a count derived from a specifed stream of a transform feedback object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glClearBufferData", {direct, [
    %   {name, "clear_buffer_data"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Fill a buffer object's data store with a fixed value."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glClearBufferSubData", {direct, [
    %   {name, "clear_buffer_sub_data"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Fill all or part of buffer object's data store with a fixed value."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glDispatchCompute", {direct, [
      {name, "dispatch_compute"},
      {params, [
        {in, "NumGroupsX", gl_uint},
        {in, "NumGroupsY", gl_uint},
        {in, "NumGroupsZ", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Launch one or more compute work groups."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDispatchComputeIndirect", {direct, [
      {name, "dispatch_compute_indirect"},
      {params, [
        {in, "Indirect", gl_intptr}
      ]},
      {return, gl_void},
      {doc, "Launch one or more compute work groups using parameters stored in a buffer."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCopyImageSubData", {direct, [
      {name, "copy_image_sub_data"},
      {params, [
        {in, "SrcName", gl_uint}, % XXX: could be texture() | render_buffer(), i think.
        {in, "SrcTarget", {gl_enum, "CopyImageSubDataTarget"}},
        {in, "SrcLevel", gl_int},
        {in, "SrcX", gl_int},
        {in, "SrcY", gl_int},
        {in, "SrcZ", gl_int},
        {in, "DstName", gl_uint}, % XXX: could be texture() | render_buffer(), i think.
        {in, "DstTarget", {gl_enum, "CopyImageSubDataTarget"}},
        {in, "DstLevel", gl_int},
        {in, "DstX", gl_int},
        {in, "DstY", gl_int},
        {in, "DstZ", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Depth", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Perform a raw data copy between two images."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glFramebufferParameteri", {indirect,
      {"glFramebufferParameter", gl_int, element}
    }},
    {"glGetFramebufferParameteriv", {indirect,
      {"glGetFramebufferParameter", gl_int, array}
    }},
    % {"glGetInternalformati64v", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    {"glInvalidateTexSubImage", {direct, [
      {name, "invalidate_tex_sub_image"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int},
        {in, "OffsetX", gl_int},
        {in, "OffsetY", gl_int},
        {in, "OffsetZ", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Depth", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Invalidate a region of a texture image."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glInvalidateTexImage", {direct, [
      {name, "invalidate_tex_image"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int}
      ]},
      {return, gl_void},
      {doc, "Invalidate the entirety a texture image."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glInvalidateBufferSubData", {direct, [
      {name, "invalidate_buffer_sub_data"},
      {params, [
        {in, "Buffer", {gl_object, buffer}},
        {in, "Offset", gl_intptr},
        {in, "Length", gl_sizeiptr}
      ]},
      {return, gl_void},
      {doc, "Invalidate a region of a buffer object's data store."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glInvalidateBufferData", {direct, [
      {name, "invalidate_buffer_data"},
      {params, [
        {in, "Buffer", {gl_object, buffer}}
      ]},
      {return, gl_void},
      {doc, "Invalidate the content of a buffer object's data store."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glInvalidateFramebuffer", {direct, [
    %   {name, "invalidate_framebuffer"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Invalidate the content of some or all of a framebuffer's attachments."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glInvalidateSubFramebuffer", {direct, [
    %   {name, "invalidate_sub_framebuffer"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Invalidate the content of a region of some or all of a framebuffer's attachments."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glMultiDrawArraysIndirect", {direct, [
    %   {name, "multi_draw_arrays_indirect"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Render multiple sets of primitives from array data, taking parameters from memory."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glMultiDrawElementsIndirect", {direct, [
    %   {name, "multi_draw_elements_indirect"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Render indexed primitives from array data, taking parameters from memory."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetProgramInterfaceiv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glGetProgramResourceIndex", {direct, [
    %   {name, "get_program_resource_index"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Query the index of a named resource within a program."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetProgramResourceName", {direct, [
    %   {name, "get_program_resource_name"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Query the name of an indexed resource within a program."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetProgramResourceiv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glGetProgramResourceLocation", {direct, [
    %   {name, "get_program_resource_location"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Query the location of a named resource within a program."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetProgramResourceLocationIndex", {direct, [
    %   {name, "get_program_resource_location_index"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Query the fragment color index of a named variable within a program."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glShaderStorageBlockBinding", {direct, [
      {name, "shader_storage_block_binding"},
      {params, [
        {in, "Program", {gl_object, program}},
        {in, "StorageBlockIndex", gl_uint},
        {in, "StorageBlockBinding", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Change an active shader storage block binding."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTexBufferRange", {direct, [
      {name, "tex_buffer_range"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "InternalFormat", {gl_enum, "SizedInternalFormat"}},
        {in, "Buffer", {gl_object, buffer}},
        {in, "Offset", gl_intptr},
        {in, "Size", gl_sizeiptr}
      ]},
      {return, gl_void},
      {doc, "Attach a range of a buffer object's data store to a buffer texture object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTexStorage2DMultisample", {direct, [
      {name, "tex_storage_2d_multisample"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Samples", gl_sizei},
        {in, "InternalFormat", {gl_enum, "SizedInternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "FixedSampleLocations", gl_bool}
      ]},
      {return, gl_void},
      {doc, "Specify storage for a two-dimensional multisample texture."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTexStorage3DMultisample", {direct, [
      {name, "tex_storage_3d_multisample"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Samples", gl_sizei},
        {in, "InternalFormat", {gl_enum, "SizedInternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Depth", gl_sizei},
        {in, "FixedSampleLocations", gl_bool}
      ]},
      {return, gl_void},
      {doc, "Specify storage for a two-dimensional multisample array texture."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTextureView", {direct, [
      {name, "texture_view"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "OrigTexture", {gl_object, texture}},
        {in, "InternalFormat", {gl_enum, "SizedInternalFormat"}},
        {in, "MinLevel", gl_uint},
        {in, "NumLevels", gl_uint},
        {in, "MinLayer", gl_uint},
        {in, "NumLayers", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Initialize a texture as a data alias of another texture's data store."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glBindVertexBuffer", {direct, [
      {name, "bind_vertex_buffer"},
      {params, [
        {in, "BindingIndex", gl_uint},
        {in, "Buffer", {gl_object, buffer}},
        {in, "Offset", gl_intptr},
        {in, "Stride", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Bind a buffer to a vertex buffer bind point."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glVertexAttribFormat", {direct, [
      {name, "vertex_attrib_format"},
      {params, [
        {in, "AttribIndex", gl_uint},
        {in, "Size", gl_int},
        {in, "Type", {gl_enum, "VertexAttribType"}},
        {in, "Normalized", gl_bool},
        {in, "RelativeOffset", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Specify the organization of vertex arrays."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glVertexAttribIFormat", {direct, [ % XXX: no doc ?
      {name, "vertex_attrib_i_format"},
      {params, [
        {in, "AttribIndex", gl_uint},
        {in, "Size", gl_int},
        {in, "Type", {gl_enum, "VertexAttribIType"}},
        {in, "RelativeOffset", gl_uint}
      ]},
      {return, gl_void}
    ]}},
    {"glVertexAttribLFormat", {direct, [
      {name, "vertex_attrib_l_format"},
      {params, [
        {in, "AttribIndex", gl_uint},
        {in, "Size", gl_int},
        {in, "Type", {gl_enum, "VertexAttribLType"}},
        {in, "RelativeOffset", gl_uint}
      ]},
      {return, gl_void}
    ]}},
    {"glVertexAttribBinding", {direct, [
      {name, "vertex_attrib_binding"},
      {params, [
        {in, "AttribIndex", gl_uint},
        {in, "BindingIndex", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Associate a vertex attribute and a vertex buffer binding for a vertex array object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glVertexBindingDivisor", {direct, [
      {name, "vertex_binding_divisor"},
      {params, [
        {in, "Index", gl_uint},
        {in, "Divisor", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Modify the rate at which generic vertex attributes
    advance."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glDebugMessageControl", {direct, [
    %   {name, "debug_message_control"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Control the reporting of debug messages in a debug context."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glDebugMessageInsert", {direct, [
      {name, "debug_message_insert"},
      {params, [
        {in, "Source", {gl_enum, "DebugSource"}},
        {in, "Type", {gl_enum, "DebugType"}},
        {in, "Id", gl_uint},
        {in, "Severity", {gl_enum, "DebugSeverity"}},
        {in, "Length", gl_sizei},
        {in, "Message", {gl_string, char}}
      ]},
      {return, gl_void},
      {doc, "Inject an application-supplied message into the debug message queue."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDebugMessageCallback", {direct, [
      {name, "debug_message_callback"},
      {params, []},
      {return, gl_void},
      {doc, "Specify a callback to receive debugging messages from the GL."},
      {example, """
      gl:foobar(abc, xyz).
      """}

    ]}},
    % {"glGetDebugMessageLog", {direct, [
    %   {name, "get_debug_message_log"},
    %   {params, []},
    %   {return, gl_void}
    % ]}},
    % {"glPushDebugGroup", {direct, [
    %   {name, "push_debug_group"},
    %   {params, [
    %     {in, "Source", {gl_enum, "DebugSource"}},
    %     {in, "Id", gl_uint},
    %     {in, "Message", {gl_string, char}}
    %   ]},
    %   {return, gl_void},
    %   {doc, "Retrieve messages from the debug message log."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glPopDebugGroup", {direct, [
      {name, "pop_debug_group"},
      {params, []},
      {return, gl_void},
      {doc, "Pop the active debug group."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glObjectLabel", {direct, [
    %   {name, "object_label"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Label a named object identified within a namespace."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetObjectLabel", {direct, [
    %   {name, "get_object_label"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Retrieve the label of a named object identified within a namespace."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glObjectPtrLabel", {direct, [
    %   {name, "object_ptr_label"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Label a a sync object identified by a pointer."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetObjectPtrLabel", {direct, [
    %   {name, "get_object_ptr_label"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Retrieve the label of a sync object identified by a pointer."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glGetPointerv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Return the address of the specified pointer."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]},
    % {"glBufferStorage", {direct, [
    %   {name, "buffer_storage"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Creates and initializes a buffer object's immutable data
    % store."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glClearTexImage", {direct, [
    %   {name, "clear_tex_image"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Fills all a texture image with a constant value."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glClearTexSubImage", {direct, [
    %   {name, "clear_tex_sub_image"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Fills all or part of a texture image with a constant value."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glBindBuffersBase", {direct, [
    %   {name, "bind_buffer_base"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Bind one or more buffer objects to a sequence of indexed buffer targets."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glBindBuffersRange", {direct, [
    %   {name, "bind_buffers_range"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Bind ranges of one or more buffer objects to a sequence of indexed buffer targets."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glBindTextures", {direct, [
    %   {name, "bind_textures"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Bind one or more named textures to a sequence of consecutive texture units."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glBindSamplers", {direct, [
    %   {name, "bind_samplers"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Bind one or more named sampler objects to a sequence of consecutive sampler units."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glBindImageTextures", {direct, [
    %   {name, "bind_image_textures"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Bind one or more named texture images to a sequence of consecutive image units."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glBindVertexBuffers", {direct, [
    %   {name, "bind_vertex_buffers"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Attach multiple buffer objects to a vertex array object."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glClipControl", {direct, [
      {name, "clip_control"},
      {params, [
        {in, "Origin", {gl_enum, "ClipControlOrigin"}},
        {in, "Depth", {gl_enum, "ClipControlDepth"}}
      ]},
      {return, gl_void},
      {doc, "Control clip coordinate to window coordinate behavior."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCreateTransformFeedbacks", {direct, [
      {name, "create_transform_feedbacks"},
      {params, [
        {out, "Feedbacks", {{list, 2}, {gl_object, transform_feedback}}}
      ]},
      {return, gl_void},
      {doc, "Create transform feedback objects."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTransformFeedbackBufferBase", {direct, [
      {name, "transform_feedback_buffer_base"},
      {params, [
        {in, "Feedback", {gl_object, transform_feedback}},
        {in, "Index", gl_uint},
        {in, "Buffer", {gl_object, buffer}}
      ]},
      {return, gl_void},
      {doc, "Bind a buffer object to a transform feedback buffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTransformFeedbackBufferRange", {direct, [
      {name, "transform_feedback_buffer_range"},
      {params, [
        {in, "Feedback", {gl_object, transform_feedback}},
        {in, "Index", gl_uint},
        {in, "Buffer", {gl_object, buffer}},
        {in, "Offset", gl_intptr},
        {in, "Size", gl_sizeiptr}
      ]},
      {return, gl_void},
      {doc, "Bind a range within a buffer object to a transform feedback buffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glGetTransformFeedbackiv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glGetTransformFeedbacki_v", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glGetTransformFeedbacki64_v", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    {"glCreateBuffers", {direct, [
      {name, "create_buffers"},
      {params, [
        {out, "Buffers", {{list, 2}, {gl_object, buffer}}}
      ]},
      {return, gl_void},
      {doc, "Create buffer objects."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glNamedBufferStorage", {direct, [
    %   {name, "named_buffer_storage"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Creates and initializes a buffer object's immutable data
    % store."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glNamedBufferData", {direct, [
    %   {name, "named_buffer_data"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Creates and initializes a buffer object's data
    % store."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glNamedBufferSubData", {direct, [
    %   {name, "named_buffer_sub_data"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Updates a subset of a buffer object's data store."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glCopyNamedBufferSubData", {direct, [
      {name, "copy_named_buffer_sub_data"},
      {params, [
        {in, "ReadBuffer", {gl_object, buffer}},
        {in, "WriteBuffer", {gl_object, buffer}},
        {in, "ReadOffset", gl_intptr},
        {in, "WriteOffset", gl_intptr},
        {in, "Size", gl_sizeiptr}
      ]},
      {return, gl_void},
      {doc, "Copy all or part of the data store of a buffer object to the data store of another buffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glClearNamedBufferData", {direct, [
    %   {name, "clear_named_buffer_data"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Fill a buffer object's data store with a fixed value."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glClearNamedBufferSubData", {direct, [
    %   {name, "clear_named_buffer_sub_data"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Fill all or part of buffer object's data store with a fixed value."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glMapNamedBuffer", {direct, [
    %   {name, "map_named_buffer"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Map all of a buffer object's data store into the client's address space."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glMapNamedBufferRange", {direct, [
    %   {name, "map_named_buffer_range"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Map all or part of a buffer object's data store into the client's address space."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glUnmapNamedBuffer", {direct, [
    %   {name, "unmap_named_buffer"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Release the mapping of a buffer object's data store into the client's address space."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glFlushMappedNamedBufferRange", {direct, [
    %   {name, "flush_mapped_named_buffer_range"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Indicate modifications to a range of a mapped buffer."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glGetNamedBufferParameteriv", {indirect,
      {"glGetNamedBufferParameter", gl_int, array}
    }},
    {"glGetNamedBufferParameteri64v", {indirect,
      {"glGetNamedBufferParameter", gl_int64, array}
    }},
    % {"glGetNamedBufferPointerv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glGetNamedBufferSubData", {direct, [
    %   {name, "get_named_buffer_sub_data"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Returns a subset of a buffer object's data store."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glCreateFramebuffers", {direct, [
    %   {name, "create_framebuffers"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Create framebuffer objects."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glNamedFramebufferRenderbuffer", {direct, [
    %   {name, "named_framebuffer_renderbuffer"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Attach a renderbuffer as a logical buffer of a framebuffer object."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glNamedFramebufferParameteri", {indirect,
      {"glNamedFramebufferParameter", gl_int, element}
    }},
    {"glNamedFramebufferTexture", {direct, [ % XXX: No doc ?
      {name, "named_framebuffer_texture"},
      {params, [
        {in, "Framebuffer", {gl_object, frame_buffer}},
        {in, "Attachment", {gl_enum, "FramebufferAttachment"}},
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int}
      ]},
      {return, gl_void}
    ]}},
    % {"glNamedFramebufferTextureLayer", {direct, [
    %   {name, "named_framebuffer_texture_layer"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Attach a single layer of a texture object as a logical buffer of a framebuffer object."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glNamedFramebufferDrawBuffer", {direct, [
    %   {name, "named_framebuffer_draw_buffer"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Specify which color buffers are to be drawn into."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glNamedFramebufferDrawBuffers", {direct, [
    %   {name, "named_framebuffer_draw_buffers"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Specifies a list of color buffers to be drawn
    % into."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glNamedFramebufferReadBuffer", {direct, [
    %   {name, "named_framebuffer_read_buffer"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Select a color buffer source for pixels."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glInvalidateNamedFramebufferData", {direct, [
    %   {name, "invalidate_named_framebuffer_data"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Invalidate the content of some or all of a framebuffer's attachments."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    % {"glInvalidateNamedFramebufferSubData", {direct, [
    %   {name, "invalidate_named_framebuffer_sub_data"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Invalidate the content of a region of some or all of a framebuffer's attachments."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glClearNamedFramebufferiv", {indirect,
      {"glClearNamedFramebuffer", gl_int, array}
    }},
    {"glClearNamedFramebufferuiv", {indirect,
      {"glClearNamedFramebuffer", gl_uint, array}
    }},
    {"glClearNamedFramebufferfv", {indirect,
      {"glClearNamedFramebuffer", gl_float, array}
    }},
    % XXX: glClearNamedFramebufferfi() does not follow pattern
    % {"glClearNamedFramebufferfi", {"glClearNamedFramebuffer", "fi"}},
    {"glBlitNamedFramebuffer", {direct, [
      {name, "blit_named_framebuffer"},
      {params, [
        {in, "ReadFramebuffer", {gl_object, frame_buffer}},
        {in, "DrawFramebuffer", {gl_object, frame_buffer}},
        {in, "SrcX0", gl_int},
        {in, "SrcY0", gl_int},
        {in, "SrcX1", gl_int},
        {in, "SrcY1", gl_int},
        {in, "DstX0", gl_int},
        {in, "DstY0", gl_int},
        {in, "DstX1", gl_int},
        {in, "DstY1", gl_int},
        {in, "Mask", {gl_bitfield, "ClearBufferMask"}},
        {in, "Filter", {gl_enum, "BlitFramebufferFilter"}}
      ]},
      {return, gl_void},
      {doc, "Copy a block of pixels from one framebuffer object to another."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCheckNamedFramebufferStatus", {direct, [
      {name, "check_named_framebuffer_status"},
      {params, [
        {in, "Framebuffer", {gl_object, frame_buffer}},
        {in, "Target", {gl_enum, "FramebufferTarget"}}
      ]},
      {return, {gl_enum, "FramebufferStatus"}},
      {doc, "Check the completeness status of a framebuffer."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGetNamedFramebufferParameteriv", {indirect,
      {"glGetNamedFramebufferParameter", gl_int, array}
    }},
    {"glGetNamedFramebufferAttachmentParameteriv", {indirect,
      {"glGetNamedFramebufferAttachmentParameter", gl_int, array}
    }},
    {"glCreateRenderbuffers", {direct, [
      {name, "create_renderbuffers"},
      {params, [
        {out, "Renderbuffers", {{list, 2}, {gl_object, render_buffer}}}
      ]},
      {return, gl_void},
      {doc, "Create renderbuffer objects."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glNamedRenderbufferStorage", {direct, [
      {name, "named_renderbuffer_storage"},
      {params, [
        {in, "Renderbuffer", {gl_object, render_buffer}},
        {in, "InternalFormat", {gl_enum, "InternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Establish data storage, format and dimensions of a
    renderbuffer object's image."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glNamedRenderbufferStorageMultisample", {direct, [
      {name, "named_renderbuffer_storage_multisample"},
      {params, [
        {in, "Renderbuffer", {gl_object, render_buffer}},
        {in, "Samples", gl_sizei},
        {in, "InternalFormat", {gl_enum, "InternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Establish data storage, format, dimensions and sample count of
    a renderbuffer object's image."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGetNamedRenderbufferParameteriv", {indirect,
      {"glGetNamedRenderbufferParameter", gl_int, array}
    }},
    {"glCreateTextures", {direct, [
      {name, "create_textures"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {out, "Textures", {{list, 2}, {gl_object, texture}}}
      ]},
      {return, gl_void},
      {doc, "Create texture objects."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTextureBuffer", {direct, [
      {name, "texture_buffer"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "InternalFormat", {gl_enum, "SizedInternalFormat"}},
        {in, "Buffer", {gl_object, buffer}}
      ]},
      {return, gl_void},
      {doc, "Attach a buffer object's data store to a buffer texture object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTextureBufferRange", {direct, [
      {name, "texture_buffer_range"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "InternalFormat", {gl_enum, "SizedInternalFormat"}},
        {in, "Buffer", {gl_object, buffer}},
        {in, "Offset", gl_intptr},
        {in, "Size", gl_sizeiptr}
      ]},
      {return, gl_void},
      {doc, "Attach a range of a buffer object's data store to a buffer texture object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTextureStorage1D", {direct, [
      {name, "texture_storage_1d"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Levels", gl_sizei},
        {in, "InternalFormat", {gl_enum, "SizedInternalFormat"}},
        {in, "Width", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Simultaneously specify storage for all levels of a one-dimensional texture."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTextureStorage2D", {direct, [
      {name, "texture_storage_2d"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Levels", gl_sizei},
        {in, "InternalFormat", {gl_enum, "SizedInternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTextureStorage3D", {direct, [
      {name, "texture_storage_3d"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Levels", gl_sizei},
        {in, "InternalFormat", {gl_enum, "SizedInternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Depth", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTextureStorage2DMultisample", {direct, [
      {name, "texture_storage_2d_multisample"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Samples", gl_sizei},
        {in, "InternalFormat", {gl_enum, "SizedInternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "FixedSampleLocations", gl_bool}
      ]},
      {return, gl_void},
      {doc, "Specify storage for a two-dimensional multisample texture."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTextureStorage3DMultisample", {direct, [
      {name, "texture_storage_3d_multisample"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Samples", gl_sizei},
        {in, "InternalFormat", {gl_enum, "SizedInternalFormat"}},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Depth", gl_sizei},
        {in, "FixedSampleLocations", gl_bool}
      ]},
      {return, gl_void},
      {doc, "Specify storage for a two-dimensional multisample array texture."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTextureSubImage1D", {direct, [
      {name, "texture_sub_image_1d"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int},
        {in, "Offset", gl_int},
        {in, "Width", gl_sizei},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "Type", {gl_enum, "PixelType"}},
        {in, "Pixels", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Specify a one-dimensional texture subimage."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTextureSubImage2D", {direct, [
      {name, "texture_sub_image_2d"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int},
        {in, "OffsetX", gl_int},
        {in, "OffsetY", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "Type", {gl_enum, "PixelType"}},
        {in, "Pixels", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Specify a two-dimensional texture subimage."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTextureSubImage3D", {direct, [
      {name, "texture_sub_image_3d"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int},
        {in, "OffsetX", gl_int},
        {in, "OffsetY", gl_int},
        {in, "OffsetZ", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Depth", gl_sizei},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "Type", {gl_enum, "PixelType"}},
        {in, "Pixels", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Specify a three-dimensional texture subimage."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCompressedTextureSubImage1D", {direct, [
      {name, "compressed_texture_sub_image_1d"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int},
        {in, "Offset", gl_int},
        {in, "Width", gl_sizei},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "ImageSize", gl_sizeiptr},
        {in, "ImageData", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Specify a one-dimensional texture subimage in a compressed
    format."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCompressedTextureSubImage2D", {direct, [
      {name, "compressed_texture_sub_image_2d"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int},
        {in, "OffsetX", gl_int},
        {in, "OffsetY", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "ImageSize", gl_sizeiptr},
        {in, "ImageData", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Specify a two-dimensional texture subimage in a compressed format."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCompressedTextureSubImage3D", {direct, [
      {name, "compressed_texture_sub_image_3d"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int},
        {in, "OffsetX", gl_int},
        {in, "OffsetY", gl_int},
        {in, "OffsetZ", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Depth", gl_sizei},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "ImageSize", gl_sizeiptr},
        {in, "ImageData", gl_binary}
      ]},
      {return, gl_void},
      {doc, "Specify a three-dimensional texture subimage in a compressed format."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCopyTextureSubImage1D", {direct, [
      {name, "copy_texture_sub_image_1d"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int},
        {in, "Offset", gl_int},
        {in, "X", gl_int},
        {in, "Y", gl_int},
        {in, "Width", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Copy a one-dimensional texture subimage."},
      {example, """
      gl:foobar(abc, xyz).
      """}

    ]}},
    {"glCopyTextureSubImage2D", {direct, [
      {name, "copy_texture_sub_image_2d"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int},
        {in, "OffsetX", gl_int},
        {in, "OffsetY", gl_int},
        {in, "X", gl_int},
        {in, "Y", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Copy a two-dimensional texture subimage."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCopyTextureSubImage3D", {direct, [
      {name, "copy_texture_sub_image_3d"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int},
        {in, "OffsetX", gl_int},
        {in, "OffsetY", gl_int},
        {in, "OffsetZ", gl_int},
        {in, "X", gl_int},
        {in, "Y", gl_int},
        {in, "Z", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Depth", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Copy a three-dimensional texture subimage."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTextureParameterf", {indirect,
      {"glTextureParameter", gl_float, element}
    }},
    {"glTextureParameterfv", {indirect,
      {"glTextureParameter", gl_float, array}
    }},
    {"glTextureParameteri", {indirect,
      {"glTextureParameter", gl_int, element}
    }},
    {"glTextureParameterIiv", {indirect,
      {"glTextureParameterI", gl_int, array}
    }},
    {"glTextureParameterIuiv", {indirect,
      {"glTextureParameterI", gl_uint, array}
    }},
    {"glTextureParameteriv", {indirect,
      {"glTextureParameter", gl_int, array}
    }},

    {"glGenerateTextureMipmap", {direct, [
      {name, "generate_texture_mipmap"},
      {params, [
        {in, "Texture", {gl_object, texture}}
      ]},
      {return, gl_void},
      {doc, "Generate mipmaps for a specified texture object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glBindTextureUnit", {direct, [
    %   {name, "bind_texture_unit"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Bind an existing texture object to the specified texture unit."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glGetTextureImage", {direct, [ % XXX: no doc ?
      {name, "get_texture_image"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "Type", {gl_enum, "PixelType"}},
        {out, "Pixels", {gl_binary, {explicit, "BufSize"}}}
      ]},
      {return, gl_void}
    ]}},
    % {"glGetCompressedTextureImage", {direct, [
    %   {name, "get_compressed_texture_image"},
    %   {params, []},
    %   {return, gl_void}
    % ]}},
    {"glGetTextureLevelParameterfv", {indirect,
      {"glGetTextureLevelParameter", gl_float, array}
    }},
    {"glGetTextureLevelParameteriv", {indirect,
      {"glGetTextureLevelParameter", gl_int, array}
    }},
    {"glGetTextureParameterfv", {indirect,
      {"glGetTextureParameter", gl_float, array}
    }},
    {"glGetTextureParameterIiv", {indirect,
      {"glGetTextureParameterI", gl_int, array}
    }},
    {"glGetTextureParameterIuiv", {indirect,
      {"glGetTextureParameterI", gl_uint, array}
    }},
    {"glGetTextureParameteriv", {indirect,
      {"glGetTextureParameter", gl_int, array}
    }},
    {"glCreateVertexArrays", {direct, [
      {name, "create_vertex_arrays"},
      {params, [
        {out, "Arrays", {{list, 2}, {gl_object, vertex_array}}}
      ]},
      {return, gl_void},
      {doc, "Create vertex array objects."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glDisableVertexArrayAttrib", {direct, [ % XXX: no doc ?
      {name, "disable_vertex_array_attrib"},
      {params, [
        {in, "Array", {gl_object, vertex_array}},
        {in, "Index", gl_uint}
      ]},
      {return, gl_void}
    ]}},
    {"glEnableVertexArrayAttrib", {direct, [ % XXX: no doc ?
      {name, "enable_vertex_array_attrib"},
      {params, [
        {in, "Array", {gl_object, vertex_array}},
        {in, "Index", gl_uint}
      ]},
      {return, gl_void}
    ]}},
    {"glVertexArrayElementBuffer", {direct, [
      {name, "vertex_array_element_buffer"},
      {params, [
        {in, "Array", {gl_object, vertex_array}},
        {in, "Buffer", {gl_object, buffer}}
      ]},
      {return, gl_void},
      {doc, "Configures element array buffer binding of a vertex array object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glVertexArrayVertexBuffer", {direct, [
      {name, "vertex_array_vertex_buffer"},
      {params, [
        {in, "Array", {gl_object, vertex_array}},
        {in, "BindingIndex", gl_uint},
        {in, "Buffer", {gl_object, buffer}},
        {in, "Offset", gl_intptr},
        {in, "Stride", gl_sizei}
      ]},
      {return, gl_void},
      {doc, "Bind a buffer to a vertex buffer bind point."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glVertexArrayVertexBuffers", {direct, [
    %   {name, "vertex_array_vertex_buffers"},
    %   {params, []},
    %   {return, gl_void},
    %   {doc, "Attach multiple buffer objects to a vertex array object."},
    %   {example, """
    %   gl:foobar(abc, xyz).
    %   """}
    % ]}},
    {"glVertexArrayAttribBinding", {direct, [ % XXX: no doc ?
      {name, "vertex_array_attrib_binding"},
      {params, [
        {in, "Array", {gl_object, vertex_array}},
        {in, "AttribIndex", gl_uint},
        {in, "BindingIndex", gl_uint}
      ]},
      {return, gl_void}
    ]}},
    {"glVertexArrayAttribFormat", {direct, [
      {name, "vertex_array_attrib_format"},
      {params, [
        {in, "Array", {gl_object, vertex_array}},
        {in, "AttribIndex", gl_uint},
        {in, "Size", gl_int},
        {in, "Type", {gl_enum, "VertexAttribType"}},
        {in, "Normalized", gl_bool},
        {in, "RelativeOffset", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Specify the organization of vertex arrays."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glVertexArrayAttribIFormat", {direct, [ % XXX: no doc ?
      {name, "vertex_array_attrib_i_format"},
      {params, [
        {in, "Array", {gl_object, vertex_array}},
        {in, "AttribIndex", gl_uint},
        {in, "Size", gl_int},
        {in, "Type", {gl_enum, "VertexAttribIType"}},
        {in, "RelativeOffset", gl_uint}
      ]},
      {return, gl_void}
    ]}},
    {"glVertexArrayAttribLFormat", {direct, [ % XXX: no doc ?
      {name, "vertex_array_attrib_l_format"},
      {params, [
        {in, "Array", {gl_object, vertex_array}},
        {in, "AttribIndex", gl_uint},
        {in, "Size", gl_int},
        {in, "Type", {gl_enum, "VertexAttribLType"}},
        {in, "RelativeOffset", gl_uint}
      ]},
      {return, gl_void}
    ]}},
    {"glVertexArrayBindingDivisor", {direct, [
      {name, "vertex_array_binding_divisor"},
      {params, [
        {in, "Array", {gl_object, vertex_array}},
        {in, "BindingIndex", gl_uint},
        {in, "Divisor", gl_uint}
      ]},
      {return, gl_void},
      {doc, "Modify the rate at which generic vertex attributes
    advance."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glGetVertexArrayiv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glGetVertexArrayIndexediv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    % {"glGetVertexArrayIndexed64iv", [
    %   {name, "my_func"},
    %   {params, []},
    %   {return, gl_void}
    % ]},
    {"glCreateSamplers", {direct,[
      {name, "create_samplers"},
      {params, [
        {out, "Samplers", {{list, 2}, {gl_object, sampler}}}
      ]},
      {return, gl_void},
      {doc, "Create sampler objects."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCreateProgramPipelines", {direct, [
      {name, "create_program_pipelines"},
      {params, [
        {out, "Pipelines", {{list, 2}, {gl_object, program_pipeline}}}
      ]},
      {return, gl_void},
      {doc, "Create program pipeline objects."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glCreateQueries", {direct, [
      {name, "create_queries"},
      {params, [
        {in, "Target", {gl_enum, "QueryTarget"}},
        {out, "Queries", {{list, 2}, {gl_object, query}}}
      ]},
      {return, gl_void},
      {doc, "Create query objects."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGetQueryBufferObjecti64v", {indirect,
      {"glGetQueryBufferObject", gl_int64, array}
    }},
    {"glGetQueryBufferObjectiv", {indirect,
      {"glGetQueryBufferObject", gl_int, array}
    }},
    {"glGetQueryBufferObjectui64v", {indirect,
      {"glGetQueryBufferObject", gl_uint64, array}
    }},
    {"glGetQueryBufferObjectuiv", {indirect,
      {"glGetQueryBufferObject", gl_uint, array}
    }},
    {"glMemoryBarrierByRegion", {direct, [ % XXX: no doc ?
      {name, "memory_barrier_by_region"},
      {params, [
        {in, "Barriers", {gl_bitfield, "MemoryBarrierMask"}}
      ]},
      {return, gl_void}
    ]}},
    {"glGetTextureSubImage", {direct, [
      {name, "get_texture_sub_image"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int},
        {in, "OffsetX", gl_int},
        {in, "OffsetY", gl_int},
        {in, "OffsetZ", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Depth", gl_sizei},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "Type", {gl_enum, "PixelType"}},
        {out, "Pixels", {gl_binary, {explicit, "BufSize"}}}
      ]},
      {return, gl_void},
      {doc, "Retrieve a sub-region of a texture image from a texture
    object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGetCompressedTextureSubImage", {direct, [
      {name, "get_compressed_texture_sub_image"},
      {params, [
        {in, "Texture", {gl_object, texture}},
        {in, "Level", gl_int},
        {in, "OffsetX", gl_int},
        {in, "OffsetY", gl_int},
        {in, "OffsetZ", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Depth", gl_sizei},
        {out, "Pixels", {gl_binary, {explicit, "BufSize"}}}
      ]},
      {return, gl_void},
      {doc, "Retrieve a sub-region of a compressed texture image from a
    compressed texture object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glGetGraphicsResetStatus", {direct, [
      {name, "get_graphics_reset_status"},
      {params, []},
      {return, {gl_enum, "GraphicsResetStatus"}},
      {doc, "Check if the rendering context has not been lost due to software or hardware issues."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glGetnCompressedTexImage", {direct, [ % XXX: no doc ?
    %   {name, "getn_compressed_tex_image"},
    %   {params, []},
    %   {return, gl_void}
    % ]}},
    {"glGetnTexImage", {direct, [ % XXX: no doc ?
      {name, "get_n_tex_image"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "Level", gl_int},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "Type", {gl_enum, "PixelType"}},
        {out, "Pixels", {gl_binary, {explicit, "PixelsSize"}}}
      ]},
      {return, gl_void}
    ]}},
    {"glGetnUniformdv", {indirect,
      {"glGetnUniform", gl_double, array}
    }},
    {"glGetnUniformfv", {indirect,
      {"glGetnUniform", gl_float, array}
    }},
    {"glGetnUniformiv", {indirect,
      {"glGetnUniform", gl_int, array}
    }},
    {"glGetnUniformuiv", {indirect,
      {"glGetnUniform", gl_uint, array}
    }},
    {"glReadnPixels", {direct, [
      {name, "read_n_pixels"},
      {params, [
        {in, "X", gl_int},
        {in, "Y", gl_int},
        {in, "Width", gl_sizei},
        {in, "Height", gl_sizei},
        {in, "Format", {gl_enum, "PixelFormat"}},
        {in, "Type", {gl_enum, "PixelType"}},
        {out, "Data", {gl_binary, {explicit, "DataSize"}}}
      ]},
      {return, gl_void},
      {doc, "Read a block of pixels from the frame buffer."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    {"glTextureBarrier", {direct, [
      {name, "texture_barrier"},
      {params, []},
      {return, gl_void},
      {doc, "Controls the ordering of reads and writes to rendered fragments across drawing commands."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]}},
    % {"glSpecializeShader", {direct, [ % XXX: no doc ?
    %   {name, "specialize_shader"},
    %   {params, []},
    %   {return, gl_void}
    % ]}},
    % {"glMultiDrawArraysIndirectCount", {direct, [ % XXX: no doc?
    %   {name, "multi_draw_arrays_indirect_count"},
    %   {params, []},
    %   {return, gl_void}
    % ]}},
    % {"glMultiDrawElementsIndirectCount", {direct, [ % XXX: no doc?
    %   {name, "multi_draw_elements_indirect_count"},
    %   {params, []},
    %   {return, gl_void}
    % ]}},

    % === TMP FUNCTIONS ===
    {"glGetShaderiv", {direct, [
      {name, "get_shader_iv"},
      {params, [
        {in, "Shader", {gl_object, shader}},
        {in, "PName", {gl_enum, "ShaderParameterName"}},
        {out, "Data", {{list, 1}, gl_int}}
      ]},
      {return, gl_void}
    ]}},
    {"glGetProgramiv", {direct, [
      {name, "get_program_iv"},
      {params, [
        {in, "Program", {gl_object, program}},
        {in, "PName", {gl_enum, "ProgramPropertyARB"}},
        {out, "Data", {{list, 1}, gl_int}}
      ]},
      {return, gl_void}
    ]}},



    % === TMP FUNCTIONS : END ===

    % the last
    {"glPolygonOffsetClamp", {direct, [ % XXX: no doc ?
      {name, "polygon_offset_clamp"},
      {params, [
        {in, "Factor", gl_float},
        {in, "Units", gl_float},
        {in, "Clamp", gl_float}
      ]},
      {return, gl_void}
    ]}}
  ]},
  {aggregate_functions, [
    {"glTexParameter", [
      {name, "tex_parameter"},
      {params, [
        {in, "Target", {gl_enum, "TextureTarget"}},
        {in, "ParamName", {gl_enum, "TextureParameterName"}},
        {in, "Param", gl_x}
      ]},
      {return, gl_void},
      {doc, "Set texture parameters."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glPixelStore", [
      {name, "pixel_store"},
      {params, [
        {in, "ParamName", {gl_enum, "PixelStoreParameter"}},
        {in, "Param", gl_x}
      ]},
      {return, gl_void},
      {doc, "Set pixel storage modes."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetTexParameter", [
      {name, "get_tex_parameter"},
      {params, [
        % {in, "Target", {gl_enum, "TextureTarget"}}, % XXX: WIP
        % {in, "ParamName", {gl_enum, "GetTextureParameter"}},
        % {out, "Param", gl_x}
      ]},
      {return, gl_void},
      {doc, "Return texture parameter values."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetTexLevelParameter", [
      {name, "get_tex_level_parameter"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Return texture parameter values for a specific level of
    detail."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glPointParameter", [
      {name, "point_parameter"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Specify point parameters."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetQuery", [
      {name, "get_query"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Return parameters of a query object target."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetQueryObject", [
      {name, "get_query_object"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Return parameters of a query object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetBufferParameter", [
      {name, "get_buffer_parameter"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Return parameters of a buffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetNamedBufferParameter", [ % XXX: no doc ?
      {name, "get_named_buffer_parameter"},
      {params, [
      ]},
      {return, gl_void}
    ]},
    {"glGetProgram", [
      {name, "get_program"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Returns a parameter from a program object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetShader", [
      {name, "get_shader"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Returns a parameter from a shader object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetUniform", [
      {name, "get_uniform"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Returns the value of a uniform variable."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glUniformMatrix", [ % XXX: no doc ?
      {name, "uniform_matrix"},
      {params, [
      ]},
      {return, gl_void}
    ]},
    {"glVertexAttrib", [
      {name, "vertex_attrib"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Specifies the value of a generic vertex attribute."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetVertexAttrib", [
      {name, "get_vertex_attrib"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Return a generic vertex attribute parameter."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glFramebufferParameter", [
      {name, "framebuffer_parameter"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Set a named parameter of a framebuffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetFramebufferParameter", [
      {name, "get_framebuffer_parameter"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Query a named parameter of a framebuffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glNamedFramebufferParameter", [
      {name, "named_framebuffer_parameter"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Set a named parameter of a framebuffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetNamedFramebufferParameter", [
      {name, "get_named_framebuffer_parameter"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Query a named parameter of a framebuffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetFramebufferAttachmentParameter", [
      {name, "get_framebuffer_attachment_parameter"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Retrieve information about attachments of a framebuffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetNamedFramebufferAttachmentParameter", [
      {name, "get_named_framebuffer_attachment_parameter"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Retrieve information about attachments of a framebuffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetVertexAttribN", [
      {name, "get_vertex_attrib_n"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Return a generic vertex attribute parameter."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetVertexAttribI", [
      {name, "get_vertex_attrib_i"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Return a generic vertex attribute parameter."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glVertexAttribI", [
      {name, "vertex_attrib_i"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Return a generic vertex attribute parameter."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glTexParameterI", [
      {name, "tex_parameter_i"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Set texture parameters."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetTexParameterI", [
      {name, "get_tex_parameter_i"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Return texture parameter values."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glClearBuffer", [
      {name, "clear_buffer"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Clear individual buffers of a framebuffer."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetRenderbufferParameter", [
      {name, "get_render_buffer_parameter"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Query a named parameter of a renderbuffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetNamedRenderbufferParameter", [
      {name, "get_named_render_buffer_parameter"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Query a named parameter of a renderbuffer object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glSamplerParameter", [
      {name, "sampler_parameter"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Set sampler parameters."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetSamplerParameter", [
      {name, "get_sampler_parameter"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Return sampler parameter values."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glSamplerParameterI", [
      {name, "sampler_parameter_i"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Set sampler parameters."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetSamplerParameterI", [
      {name, "get_sampler_parameter_i"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Return sampler parameter values."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetQueryObject", [
      {name, "get_query_object"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Return parameters of a query object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glVertexAttribP", [ % XXX: no doc ?
      {name, "vertex_attrib_p"},
      {params, [
      ]},
      {return, gl_void}
    ]},
    {"glPatchParameter", [
      {name, "patch_parameter"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Specifies the parameters for patch primitives."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glProgramUniform", [
      {name, "program_uniform"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Specify the value of a uniform variable for a specified program object."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glProgramUniformMatrix", [ % XXX: no doc ?
      {name, "program_uniform_matrix"},
      {params, [
      ]},
      {return, gl_void}
    ]},
    {"glVertexAttribL", [ % XXX: no doc ?
      {name, "vertex_attrib_l"},
      {params, [
      ]},
      {return, gl_void}
    ]},
    {"glClearNamedFramebuffer", [ % XXX: no doc ?
      {name, "clear_named_framebuffer"},
      {params, [
      ]},
      {return, gl_void}
    ]},
    {"glTextureParameter", [
      {name, "texture_parameter"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Set texture parameters."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glTextureParameterI", [
      {name, "texture_parameter_i"},
      {params, [
      ]},
      {return, gl_void},
      {doc, "Set texture parameters."},
      {example, """
      gl:foobar(abc, xyz).
      """}
    ]},
    {"glGetTextureLevelParameter", [ % XXX: no doc ?
      {name, "get_texture_level_parameter"},
      {params, [
      ]},
      {return, gl_void}
    ]},
    {"glGetTextureParameter", [ % XXX: no doc ?
      {name, "get_texture_parameter"},
      {params, [
      ]},
      {return, gl_void}
    ]},
    {"glGetTextureParameterI", [ % XXX: no doc ?
      {name, "get_texture_parameter_i"},
      {params, [

      ]},
      {return, gl_void}
    ]},
    {"glGetQueryBufferObject", [ % XXX: no doc ?
      {name, "get_query_buffer_object"},
      {params, [
      ]},
      {return, gl_void}
    ]},
    {"glGetnUniform", [ % XXX: no doc ?
      {name, "getn_uniform"},
      {params, [
      ]},
      {return, gl_void}
    ]}
  ]}
].
